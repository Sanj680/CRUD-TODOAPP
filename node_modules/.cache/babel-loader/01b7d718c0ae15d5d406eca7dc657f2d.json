{"ast":null,"code":"export function getValidateContainer(nodeRoot) {\n  if (nodeRoot instanceof Document) {\n    return nodeRoot.body;\n  }\n\n  return Array.from(nodeRoot.childNodes).find(function (ele) {\n    return (ele === null || ele === void 0 ? void 0 : ele.nodeType) === Node.ELEMENT_NODE;\n  });\n}\nexport function isNotGrey(color) {\n  // eslint-disable-next-line no-useless-escape\n  var match = (color || '').match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\d.]*)?\\)/);\n\n  if (match && match[1] && match[2] && match[3]) {\n    return !(match[1] === match[2] && match[2] === match[3]);\n  }\n\n  return true;\n}\nexport function isValidWaveColor(color) {\n  return color && color !== '#fff' && color !== '#ffffff' && color !== 'rgb(255, 255, 255)' && color !== 'rgba(255, 255, 255, 1)' && isNotGrey(color) && !/rgba\\((?:\\d*, ){3}0\\)/.test(color) && // any transparent rgba color\n  color !== 'transparent';\n}\nexport function getTargetWaveColor(node) {\n  var _getComputedStyle = getComputedStyle(node),\n      borderTopColor = _getComputedStyle.borderTopColor,\n      borderColor = _getComputedStyle.borderColor,\n      backgroundColor = _getComputedStyle.backgroundColor;\n\n  if (isValidWaveColor(borderTopColor)) {\n    return borderTopColor;\n  }\n\n  if (isValidWaveColor(borderColor)) {\n    return borderColor;\n  }\n\n  if (isValidWaveColor(backgroundColor)) {\n    return backgroundColor;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/_util/wave/util.js"],"names":["getValidateContainer","nodeRoot","Document","body","Array","from","childNodes","find","ele","nodeType","Node","ELEMENT_NODE","isNotGrey","color","match","isValidWaveColor","test","getTargetWaveColor","node","getComputedStyle","borderTopColor","borderColor","backgroundColor"],"mappings":"AAAA,OAAO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,YAAYC,QAAxB,EAAkC;AAChC,WAAOD,QAAQ,CAACE,IAAhB;AACD;;AACD,SAAOC,KAAK,CAACC,IAAN,CAAWJ,QAAQ,CAACK,UAApB,EAAgCC,IAAhC,CAAqC,UAAAC,GAAG;AAAA,WAAI,CAACA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACC,QAA/C,MAA6DC,IAAI,CAACC,YAAtE;AAAA,GAAxC,CAAP;AACD;AACD,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B;AACA,MAAMC,KAAK,GAAG,CAACD,KAAK,IAAI,EAAV,EAAcC,KAAd,CAAoB,yCAApB,CAAd;;AACA,MAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAA1B,IAAiCA,KAAK,CAAC,CAAD,CAA1C,EAA+C;AAC7C,WAAO,EAAEA,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAAlB,IAAyBA,KAAK,CAAC,CAAD,CAAL,KAAaA,KAAK,CAAC,CAAD,CAA7C,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AACD,OAAO,SAASC,gBAAT,CAA0BF,KAA1B,EAAiC;AACtC,SAAOA,KAAK,IAAIA,KAAK,KAAK,MAAnB,IAA6BA,KAAK,KAAK,SAAvC,IAAoDA,KAAK,KAAK,oBAA9D,IAAsFA,KAAK,KAAK,wBAAhG,IAA4HD,SAAS,CAACC,KAAD,CAArI,IAAgJ,CAAC,wBAAwBG,IAAxB,CAA6BH,KAA7B,CAAjJ,IACP;AACAA,EAAAA,KAAK,KAAK,aAFV;AAGD;AACD,OAAO,SAASI,kBAAT,CAA4BC,IAA5B,EAAkC;AAAA,0BAKnCC,gBAAgB,CAACD,IAAD,CALmB;AAAA,MAErCE,cAFqC,qBAErCA,cAFqC;AAAA,MAGrCC,WAHqC,qBAGrCA,WAHqC;AAAA,MAIrCC,eAJqC,qBAIrCA,eAJqC;;AAMvC,MAAIP,gBAAgB,CAACK,cAAD,CAApB,EAAsC;AACpC,WAAOA,cAAP;AACD;;AACD,MAAIL,gBAAgB,CAACM,WAAD,CAApB,EAAmC;AACjC,WAAOA,WAAP;AACD;;AACD,MAAIN,gBAAgB,CAACO,eAAD,CAApB,EAAuC;AACrC,WAAOA,eAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["export function getValidateContainer(nodeRoot) {\n  if (nodeRoot instanceof Document) {\n    return nodeRoot.body;\n  }\n  return Array.from(nodeRoot.childNodes).find(ele => (ele === null || ele === void 0 ? void 0 : ele.nodeType) === Node.ELEMENT_NODE);\n}\nexport function isNotGrey(color) {\n  // eslint-disable-next-line no-useless-escape\n  const match = (color || '').match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\d.]*)?\\)/);\n  if (match && match[1] && match[2] && match[3]) {\n    return !(match[1] === match[2] && match[2] === match[3]);\n  }\n  return true;\n}\nexport function isValidWaveColor(color) {\n  return color && color !== '#fff' && color !== '#ffffff' && color !== 'rgb(255, 255, 255)' && color !== 'rgba(255, 255, 255, 1)' && isNotGrey(color) && !/rgba\\((?:\\d*, ){3}0\\)/.test(color) &&\n  // any transparent rgba color\n  color !== 'transparent';\n}\nexport function getTargetWaveColor(node) {\n  const {\n    borderTopColor,\n    borderColor,\n    backgroundColor\n  } = getComputedStyle(node);\n  if (isValidWaveColor(borderTopColor)) {\n    return borderTopColor;\n  }\n  if (isValidWaveColor(borderColor)) {\n    return borderColor;\n  }\n  if (isValidWaveColor(backgroundColor)) {\n    return backgroundColor;\n  }\n  return null;\n}"]},"metadata":{},"sourceType":"module"}