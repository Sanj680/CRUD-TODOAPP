{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport StyleContext from \"../StyleContext\";\nimport useHMR from \"./useHMR\";\nexport default function useClientCache(prefix, keyPath, cacheFn, onCacheRemove) {\n  var _React$useContext = React.useContext(StyleContext),\n      globalCache = _React$useContext.cache;\n\n  var fullPath = [prefix].concat(_toConsumableArray(keyPath));\n  var HMRUpdate = useHMR(); // Create cache\n\n  React.useMemo(function () {\n    globalCache.update(fullPath, function (prevCache) {\n      var _ref = prevCache || [],\n          _ref2 = _slicedToArray(_ref, 2),\n          _ref2$ = _ref2[0],\n          times = _ref2$ === void 0 ? 0 : _ref2$,\n          cache = _ref2[1]; // HMR should always ignore cache since developer may change it\n\n\n      var tmpCache = cache;\n\n      if (process.env.NODE_ENV !== 'production' && cache && HMRUpdate) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(tmpCache, HMRUpdate);\n        tmpCache = null;\n      }\n\n      var mergedCache = tmpCache || cacheFn();\n      return [times + 1, mergedCache];\n    });\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [fullPath.join('_')]\n  /* eslint-enable */\n  ); // Remove if no need anymore\n\n  React.useEffect(function () {\n    return function () {\n      globalCache.update(fullPath, function (prevCache) {\n        var _ref3 = prevCache || [],\n            _ref4 = _slicedToArray(_ref3, 2),\n            _ref4$ = _ref4[0],\n            times = _ref4$ === void 0 ? 0 : _ref4$,\n            cache = _ref4[1];\n\n        var nextCount = times - 1;\n\n        if (nextCount === 0) {\n          onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(cache, false);\n          return null;\n        }\n\n        return [times - 1, cache];\n      });\n    };\n  }, fullPath);\n  return globalCache.get(fullPath)[1];\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/@ant-design/cssinjs/es/hooks/useGlobalCache.js"],"names":["_slicedToArray","_toConsumableArray","React","StyleContext","useHMR","useClientCache","prefix","keyPath","cacheFn","onCacheRemove","_React$useContext","useContext","globalCache","cache","fullPath","concat","HMRUpdate","useMemo","update","prevCache","_ref","_ref2","_ref2$","times","tmpCache","process","env","NODE_ENV","mergedCache","join","useEffect","_ref3","_ref4","_ref4$","nextCount","get"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport StyleContext from \"../StyleContext\";\nimport useHMR from \"./useHMR\";\nexport default function useClientCache(prefix, keyPath, cacheFn, onCacheRemove) {\n  var _React$useContext = React.useContext(StyleContext),\n      globalCache = _React$useContext.cache;\n\n  var fullPath = [prefix].concat(_toConsumableArray(keyPath));\n  var HMRUpdate = useHMR(); // Create cache\n\n  React.useMemo(function () {\n    globalCache.update(fullPath, function (prevCache) {\n      var _ref = prevCache || [],\n          _ref2 = _slicedToArray(_ref, 2),\n          _ref2$ = _ref2[0],\n          times = _ref2$ === void 0 ? 0 : _ref2$,\n          cache = _ref2[1]; // HMR should always ignore cache since developer may change it\n\n\n      var tmpCache = cache;\n\n      if (process.env.NODE_ENV !== 'production' && cache && HMRUpdate) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(tmpCache, HMRUpdate);\n        tmpCache = null;\n      }\n\n      var mergedCache = tmpCache || cacheFn();\n      return [times + 1, mergedCache];\n    });\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [fullPath.join('_')]\n  /* eslint-enable */\n  ); // Remove if no need anymore\n\n  React.useEffect(function () {\n    return function () {\n      globalCache.update(fullPath, function (prevCache) {\n        var _ref3 = prevCache || [],\n            _ref4 = _slicedToArray(_ref3, 2),\n            _ref4$ = _ref4[0],\n            times = _ref4$ === void 0 ? 0 : _ref4$,\n            cache = _ref4[1];\n\n        var nextCount = times - 1;\n\n        if (nextCount === 0) {\n          onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(cache, false);\n          return null;\n        }\n\n        return [times - 1, cache];\n      });\n    };\n  }, fullPath);\n  return globalCache.get(fullPath)[1];\n}"]},"metadata":{},"sourceType":"module"}