{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport BodyContext from \"../context/BodyContext\";\nimport HoverContext from \"../context/HoverContext\";\nimport PerfContext from \"../context/PerfContext\";\nimport ResizeContext from \"../context/ResizeContext\";\nimport TableContext from \"../context/TableContext\";\nimport { useContextSelector } from \"../ContextSelector\";\nimport useFlattenRecords from \"../hooks/useFlattenRecords\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport BodyRow from \"./BodyRow\";\nimport ExpandedRow from \"./ExpandedRow\";\nimport MeasureRow from \"./MeasureRow\";\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n  var onColumnResize = useContextSelector(ResizeContext, 'onColumnResize');\n\n  var _useContextSelector = useContextSelector(TableContext, ['prefixCls', 'getComponent']),\n      prefixCls = _useContextSelector.prefixCls,\n      getComponent = _useContextSelector.getComponent;\n\n  var flattenColumns = useContextSelector(BodyContext, 'flattenColumns');\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // =================== Performance ====================\n\n  var perfRef = React.useRef({\n    renderWithProps: false\n  }); // ====================== Hover =======================\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startRow = _React$useState2[0],\n      setStartRow = _React$useState2[1];\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      endRow = _React$useState4[0],\n      setEndRow = _React$useState4[1];\n\n  var onHover = React.useCallback(function (start, end) {\n    setStartRow(start);\n    setEndRow(end);\n  }, []); // ====================== Render ======================\n\n  var bodyNode = React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var thComponent = getComponent(['body', 'cell'], 'th');\n    var rows;\n\n    if (data.length) {\n      rows = flattenData.map(function (item, idx) {\n        var record = item.record,\n            indent = item.indent,\n            renderIndex = item.index;\n        var key = getRowKey(record, idx);\n        return /*#__PURE__*/React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: idx,\n          renderIndex: renderIndex,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          scopeCellComponent: thComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName,\n          indent: indent\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        component: trComponent,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length,\n        isEmpty: true\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n      prefixCls: prefixCls,\n      columnsKey: columnsKey,\n      onColumnResize: onColumnResize\n    }), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData]);\n  return /*#__PURE__*/React.createElement(PerfContext.Provider, {\n    value: perfRef.current\n  }, /*#__PURE__*/React.createElement(HoverContext.Provider, {\n    value: {\n      startRow: startRow,\n      endRow: endRow,\n      onHover: onHover\n    }\n  }, bodyNode));\n}\n\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/rc-table/es/Body/index.js"],"names":["_slicedToArray","React","BodyContext","HoverContext","PerfContext","ResizeContext","TableContext","useContextSelector","useFlattenRecords","getColumnsKey","BodyRow","ExpandedRow","MeasureRow","Body","_ref","data","getRowKey","measureColumnWidth","expandedKeys","onRow","rowExpandable","emptyNode","childrenColumnName","onColumnResize","_useContextSelector","prefixCls","getComponent","flattenColumns","flattenData","perfRef","useRef","renderWithProps","_React$useState","useState","_React$useState2","startRow","setStartRow","_React$useState3","_React$useState4","endRow","setEndRow","onHover","useCallback","start","end","bodyNode","useMemo","WrapperComponent","trComponent","tdComponent","thComponent","rows","length","map","item","idx","record","indent","renderIndex","index","key","createElement","rowKey","recordKey","rowComponent","cellComponent","scopeCellComponent","expanded","className","concat","component","colSpan","isEmpty","columnsKey","Provider","value","current","MemoBody","memo","displayName"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,MAEIC,kBAAkB,GAAGH,IAAI,CAACG,kBAF9B;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACI,YAHxB;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAAA,MAKIC,aAAa,GAAGN,IAAI,CAACM,aALzB;AAAA,MAMIC,SAAS,GAAGP,IAAI,CAACO,SANrB;AAAA,MAOIC,kBAAkB,GAAGR,IAAI,CAACQ,kBAP9B;AAQA,MAAIC,cAAc,GAAGhB,kBAAkB,CAACF,aAAD,EAAgB,gBAAhB,CAAvC;;AAEA,MAAImB,mBAAmB,GAAGjB,kBAAkB,CAACD,YAAD,EAAe,CAAC,WAAD,EAAc,cAAd,CAAf,CAA5C;AAAA,MACImB,SAAS,GAAGD,mBAAmB,CAACC,SADpC;AAAA,MAEIC,YAAY,GAAGF,mBAAmB,CAACE,YAFvC;;AAIA,MAAIC,cAAc,GAAGpB,kBAAkB,CAACL,WAAD,EAAc,gBAAd,CAAvC;AACA,MAAI0B,WAAW,GAAGpB,iBAAiB,CAACO,IAAD,EAAOO,kBAAP,EAA2BJ,YAA3B,EAAyCF,SAAzC,CAAnC,CAhBkB,CAgBsE;;AAExF,MAAIa,OAAO,GAAG5B,KAAK,CAAC6B,MAAN,CAAa;AACzBC,IAAAA,eAAe,EAAE;AADQ,GAAb,CAAd,CAlBkB,CAoBd;;AAEJ,MAAIC,eAAe,GAAG/B,KAAK,CAACgC,QAAN,CAAe,CAAC,CAAhB,CAAtB;AAAA,MACIC,gBAAgB,GAAGlC,cAAc,CAACgC,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAF/B;AAAA,MAGIE,WAAW,GAAGF,gBAAgB,CAAC,CAAD,CAHlC;;AAKA,MAAIG,gBAAgB,GAAGpC,KAAK,CAACgC,QAAN,CAAe,CAAC,CAAhB,CAAvB;AAAA,MACIK,gBAAgB,GAAGtC,cAAc,CAACqC,gBAAD,EAAmB,CAAnB,CADrC;AAAA,MAEIE,MAAM,GAAGD,gBAAgB,CAAC,CAAD,CAF7B;AAAA,MAGIE,SAAS,GAAGF,gBAAgB,CAAC,CAAD,CAHhC;;AAKA,MAAIG,OAAO,GAAGxC,KAAK,CAACyC,WAAN,CAAkB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACpDR,IAAAA,WAAW,CAACO,KAAD,CAAX;AACAH,IAAAA,SAAS,CAACI,GAAD,CAAT;AACD,GAHa,EAGX,EAHW,CAAd,CAhCkB,CAmCV;;AAER,MAAIC,QAAQ,GAAG5C,KAAK,CAAC6C,OAAN,CAAc,YAAY;AACvC,QAAIC,gBAAgB,GAAGrB,YAAY,CAAC,CAAC,MAAD,EAAS,SAAT,CAAD,EAAsB,OAAtB,CAAnC;AACA,QAAIsB,WAAW,GAAGtB,YAAY,CAAC,CAAC,MAAD,EAAS,KAAT,CAAD,EAAkB,IAAlB,CAA9B;AACA,QAAIuB,WAAW,GAAGvB,YAAY,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,EAAmB,IAAnB,CAA9B;AACA,QAAIwB,WAAW,GAAGxB,YAAY,CAAC,CAAC,MAAD,EAAS,MAAT,CAAD,EAAmB,IAAnB,CAA9B;AACA,QAAIyB,IAAJ;;AAEA,QAAIpC,IAAI,CAACqC,MAAT,EAAiB;AACfD,MAAAA,IAAI,GAAGvB,WAAW,CAACyB,GAAZ,CAAgB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC1C,YAAIC,MAAM,GAAGF,IAAI,CAACE,MAAlB;AAAA,YACIC,MAAM,GAAGH,IAAI,CAACG,MADlB;AAAA,YAEIC,WAAW,GAAGJ,IAAI,CAACK,KAFvB;AAGA,YAAIC,GAAG,GAAG5C,SAAS,CAACwC,MAAD,EAASD,GAAT,CAAnB;AACA,eAAO,aAAatD,KAAK,CAAC4D,aAAN,CAAoBnD,OAApB,EAA6B;AAC/CkD,UAAAA,GAAG,EAAEA,GAD0C;AAE/CE,UAAAA,MAAM,EAAEF,GAFuC;AAG/CJ,UAAAA,MAAM,EAAEA,MAHuC;AAI/CO,UAAAA,SAAS,EAAEH,GAJoC;AAK/CD,UAAAA,KAAK,EAAEJ,GALwC;AAM/CG,UAAAA,WAAW,EAAEA,WANkC;AAO/CM,UAAAA,YAAY,EAAEhB,WAPiC;AAQ/CiB,UAAAA,aAAa,EAAEhB,WARgC;AAS/CiB,UAAAA,kBAAkB,EAAEhB,WAT2B;AAU/ChC,UAAAA,YAAY,EAAEA,YAViC;AAW/CC,UAAAA,KAAK,EAAEA,KAXwC;AAY/CH,UAAAA,SAAS,EAAEA,SAZoC;AAa/CI,UAAAA,aAAa,EAAEA,aAbgC;AAc/CE,UAAAA,kBAAkB,EAAEA,kBAd2B;AAe/CmC,UAAAA,MAAM,EAAEA;AAfuC,SAA7B,CAApB;AAiBD,OAtBM,CAAP;AAuBD,KAxBD,MAwBO;AACLN,MAAAA,IAAI,GAAG,aAAalD,KAAK,CAAC4D,aAAN,CAAoBlD,WAApB,EAAiC;AACnDwD,QAAAA,QAAQ,EAAE,IADyC;AAEnDC,QAAAA,SAAS,EAAE,GAAGC,MAAH,CAAU5C,SAAV,EAAqB,cAArB,CAFwC;AAGnDA,QAAAA,SAAS,EAAEA,SAHwC;AAInD6C,QAAAA,SAAS,EAAEtB,WAJwC;AAKnDiB,QAAAA,aAAa,EAAEhB,WALoC;AAMnDsB,QAAAA,OAAO,EAAE5C,cAAc,CAACyB,MAN2B;AAOnDoB,QAAAA,OAAO,EAAE;AAP0C,OAAjC,EAQjBnD,SARiB,CAApB;AASD;;AAED,QAAIoD,UAAU,GAAGhE,aAAa,CAACkB,cAAD,CAA9B;AACA,WAAO,aAAa1B,KAAK,CAAC4D,aAAN,CAAoBd,gBAApB,EAAsC;AACxDqB,MAAAA,SAAS,EAAE,GAAGC,MAAH,CAAU5C,SAAV,EAAqB,QAArB;AAD6C,KAAtC,EAEjBR,kBAAkB,IAAI,aAAahB,KAAK,CAAC4D,aAAN,CAAoBjD,UAApB,EAAgC;AACpEa,MAAAA,SAAS,EAAEA,SADyD;AAEpEgD,MAAAA,UAAU,EAAEA,UAFwD;AAGpElD,MAAAA,cAAc,EAAEA;AAHoD,KAAhC,CAFlB,EAMhB4B,IANgB,CAApB;AAOD,GAnDc,EAmDZ,CAACpC,IAAD,EAAOU,SAAP,EAAkBN,KAAlB,EAAyBF,kBAAzB,EAA6CC,YAA7C,EAA2DF,SAA3D,EAAsEU,YAAtE,EAAoFL,SAApF,EAA+FM,cAA/F,EAA+GL,kBAA/G,EAAmIC,cAAnI,EAAmJH,aAAnJ,EAAkKQ,WAAlK,CAnDY,CAAf;AAoDA,SAAO,aAAa3B,KAAK,CAAC4D,aAAN,CAAoBzD,WAAW,CAACsE,QAAhC,EAA0C;AAC5DC,IAAAA,KAAK,EAAE9C,OAAO,CAAC+C;AAD6C,GAA1C,EAEjB,aAAa3E,KAAK,CAAC4D,aAAN,CAAoB1D,YAAY,CAACuE,QAAjC,EAA2C;AACzDC,IAAAA,KAAK,EAAE;AACLxC,MAAAA,QAAQ,EAAEA,QADL;AAELI,MAAAA,MAAM,EAAEA,MAFH;AAGLE,MAAAA,OAAO,EAAEA;AAHJ;AADkD,GAA3C,EAMbI,QANa,CAFI,CAApB;AASD;;AAED,IAAIgC,QAAQ,GAAG,aAAa5E,KAAK,CAAC6E,IAAN,CAAWjE,IAAX,CAA5B;AACAgE,QAAQ,CAACE,WAAT,GAAuB,MAAvB;AACA,eAAeF,QAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport BodyContext from \"../context/BodyContext\";\nimport HoverContext from \"../context/HoverContext\";\nimport PerfContext from \"../context/PerfContext\";\nimport ResizeContext from \"../context/ResizeContext\";\nimport TableContext from \"../context/TableContext\";\nimport { useContextSelector } from \"../ContextSelector\";\nimport useFlattenRecords from \"../hooks/useFlattenRecords\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport BodyRow from \"./BodyRow\";\nimport ExpandedRow from \"./ExpandedRow\";\nimport MeasureRow from \"./MeasureRow\";\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n  var onColumnResize = useContextSelector(ResizeContext, 'onColumnResize');\n\n  var _useContextSelector = useContextSelector(TableContext, ['prefixCls', 'getComponent']),\n      prefixCls = _useContextSelector.prefixCls,\n      getComponent = _useContextSelector.getComponent;\n\n  var flattenColumns = useContextSelector(BodyContext, 'flattenColumns');\n  var flattenData = useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey); // =================== Performance ====================\n\n  var perfRef = React.useRef({\n    renderWithProps: false\n  }); // ====================== Hover =======================\n\n  var _React$useState = React.useState(-1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      startRow = _React$useState2[0],\n      setStartRow = _React$useState2[1];\n\n  var _React$useState3 = React.useState(-1),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      endRow = _React$useState4[0],\n      setEndRow = _React$useState4[1];\n\n  var onHover = React.useCallback(function (start, end) {\n    setStartRow(start);\n    setEndRow(end);\n  }, []); // ====================== Render ======================\n\n  var bodyNode = React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var thComponent = getComponent(['body', 'cell'], 'th');\n    var rows;\n\n    if (data.length) {\n      rows = flattenData.map(function (item, idx) {\n        var record = item.record,\n            indent = item.indent,\n            renderIndex = item.index;\n        var key = getRowKey(record, idx);\n        return /*#__PURE__*/React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: idx,\n          renderIndex: renderIndex,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          scopeCellComponent: thComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName,\n          indent: indent\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        component: trComponent,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length,\n        isEmpty: true\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(MeasureRow, {\n      prefixCls: prefixCls,\n      columnsKey: columnsKey,\n      onColumnResize: onColumnResize\n    }), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData]);\n  return /*#__PURE__*/React.createElement(PerfContext.Provider, {\n    value: perfRef.current\n  }, /*#__PURE__*/React.createElement(HoverContext.Provider, {\n    value: {\n      startRow: startRow,\n      endRow: endRow,\n      onHover: onHover\n    }\n  }, bodyNode));\n}\n\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;"]},"metadata":{},"sourceType":"module"}