{"ast":null,"code":"import { placements } from \"rc-tooltip/es/placements\";\nconst autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nconst autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nconst targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n\n  return Object.assign(Object.assign({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nexport default function getPlacements(config) {\n  const {\n    arrowWidth = 4,\n    horizontalArrowShift = 16,\n    verticalArrowShift = 8,\n    autoAdjustOverflow,\n    arrowPointAtCenter\n  } = config;\n  const placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-4, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [4, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -4]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, 4]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + arrowWidth), -4]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-4, -(verticalArrowShift + arrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + arrowWidth, -4]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [4, -(verticalArrowShift + arrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + arrowWidth, 4]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [4, verticalArrowShift + arrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + arrowWidth), 4]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-4, verticalArrowShift + arrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(key => {\n    placementMap[key] = arrowPointAtCenter ? Object.assign(Object.assign({}, placementMap[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset\n    }) : Object.assign(Object.assign({}, placements[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/_util/placements.js"],"names":["placements","autoAdjustOverflowEnabled","adjustX","adjustY","autoAdjustOverflowDisabled","targetOffset","getOverflowOptions","autoAdjustOverflow","Object","assign","getPlacements","config","arrowWidth","horizontalArrowShift","verticalArrowShift","arrowPointAtCenter","placementMap","left","points","offset","right","top","bottom","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","keys","forEach","key","overflow","ignoreShake"],"mappings":"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","sourcesContent":["import { placements } from \"rc-tooltip/es/placements\";\nconst autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nconst autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nconst targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n  return Object.assign(Object.assign({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nexport default function getPlacements(config) {\n  const {\n    arrowWidth = 4,\n    horizontalArrowShift = 16,\n    verticalArrowShift = 8,\n    autoAdjustOverflow,\n    arrowPointAtCenter\n  } = config;\n  const placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-4, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [4, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -4]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, 4]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + arrowWidth), -4]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-4, -(verticalArrowShift + arrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + arrowWidth, -4]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [4, -(verticalArrowShift + arrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + arrowWidth, 4]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [4, verticalArrowShift + arrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + arrowWidth), 4]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-4, verticalArrowShift + arrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(key => {\n    placementMap[key] = arrowPointAtCenter ? Object.assign(Object.assign({}, placementMap[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset\n    }) : Object.assign(Object.assign({}, placements[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}"]},"metadata":{},"sourceType":"module"}