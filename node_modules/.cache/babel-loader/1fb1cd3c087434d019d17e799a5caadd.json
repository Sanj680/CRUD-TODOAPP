{"ast":null,"code":"import HolderOutlined from \"@ant-design/icons/es/icons/HolderOutlined\";\nimport classNames from 'classnames';\nimport RcTree from 'rc-tree';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport initCollapseMotion from '../_util/motion';\nimport dropIndicatorRender from './utils/dropIndicator';\nimport renderSwitcherIcon from './utils/iconUtil';\nimport useStyle from './style';\nconst Tree = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction,\n    virtual\n  } = React.useContext(ConfigContext);\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    showIcon = false,\n    showLine,\n    switcherIcon,\n    blockNode = false,\n    children,\n    checkable = false,\n    selectable = true,\n    draggable,\n    motion: customMotion\n  } = props;\n  const prefixCls = getPrefixCls('tree', customizePrefixCls);\n  const rootPrefixCls = getPrefixCls();\n  const motion = customMotion !== null && customMotion !== void 0 ? customMotion : Object.assign(Object.assign({}, initCollapseMotion(rootPrefixCls)), {\n    motionAppear: false\n  });\n  const newProps = Object.assign(Object.assign({}, props), {\n    checkable,\n    selectable,\n    showIcon,\n    motion,\n    blockNode,\n    showLine: Boolean(showLine),\n    dropIndicatorRender\n  });\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const draggableConfig = React.useMemo(() => {\n    if (!draggable) {\n      return false;\n    }\n\n    let mergedDraggable = {};\n\n    switch (typeof draggable) {\n      case 'function':\n        mergedDraggable.nodeDraggable = draggable;\n        break;\n\n      case 'object':\n        mergedDraggable = Object.assign({}, draggable);\n        break;\n\n      default:\n        break;\n      // Do nothing\n    }\n\n    if (mergedDraggable.icon !== false) {\n      mergedDraggable.icon = mergedDraggable.icon || /*#__PURE__*/React.createElement(HolderOutlined, null);\n    }\n\n    return mergedDraggable;\n  }, [draggable]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcTree, Object.assign({\n    itemHeight: 20,\n    ref: ref,\n    virtual: virtual\n  }, newProps, {\n    prefixCls: prefixCls,\n    className: classNames({\n      [`${prefixCls}-icon-hide`]: !showIcon,\n      [`${prefixCls}-block-node`]: blockNode,\n      [`${prefixCls}-unselectable`]: !selectable,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    }, className, hashId),\n    direction: direction,\n    checkable: checkable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-checkbox-inner`\n    }) : checkable,\n    selectable: selectable,\n    switcherIcon: nodeProps => renderSwitcherIcon(prefixCls, switcherIcon, showLine, nodeProps),\n    draggable: draggableConfig\n  }), children));\n});\nexport default Tree;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/tree/Tree.js"],"names":["HolderOutlined","classNames","RcTree","React","ConfigContext","initCollapseMotion","dropIndicatorRender","renderSwitcherIcon","useStyle","Tree","forwardRef","props","ref","getPrefixCls","direction","virtual","useContext","prefixCls","customizePrefixCls","className","showIcon","showLine","switcherIcon","blockNode","children","checkable","selectable","draggable","motion","customMotion","rootPrefixCls","Object","assign","motionAppear","newProps","Boolean","wrapSSR","hashId","draggableConfig","useMemo","mergedDraggable","nodeDraggable","icon","createElement","itemHeight","nodeProps"],"mappings":"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","sourcesContent":["import HolderOutlined from \"@ant-design/icons/es/icons/HolderOutlined\";\nimport classNames from 'classnames';\nimport RcTree from 'rc-tree';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport initCollapseMotion from '../_util/motion';\nimport dropIndicatorRender from './utils/dropIndicator';\nimport renderSwitcherIcon from './utils/iconUtil';\nimport useStyle from './style';\nconst Tree = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction,\n    virtual\n  } = React.useContext(ConfigContext);\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    showIcon = false,\n    showLine,\n    switcherIcon,\n    blockNode = false,\n    children,\n    checkable = false,\n    selectable = true,\n    draggable,\n    motion: customMotion\n  } = props;\n  const prefixCls = getPrefixCls('tree', customizePrefixCls);\n  const rootPrefixCls = getPrefixCls();\n  const motion = customMotion !== null && customMotion !== void 0 ? customMotion : Object.assign(Object.assign({}, initCollapseMotion(rootPrefixCls)), {\n    motionAppear: false\n  });\n  const newProps = Object.assign(Object.assign({}, props), {\n    checkable,\n    selectable,\n    showIcon,\n    motion,\n    blockNode,\n    showLine: Boolean(showLine),\n    dropIndicatorRender\n  });\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const draggableConfig = React.useMemo(() => {\n    if (!draggable) {\n      return false;\n    }\n    let mergedDraggable = {};\n    switch (typeof draggable) {\n      case 'function':\n        mergedDraggable.nodeDraggable = draggable;\n        break;\n      case 'object':\n        mergedDraggable = Object.assign({}, draggable);\n        break;\n      default:\n        break;\n      // Do nothing\n    }\n\n    if (mergedDraggable.icon !== false) {\n      mergedDraggable.icon = mergedDraggable.icon || /*#__PURE__*/React.createElement(HolderOutlined, null);\n    }\n    return mergedDraggable;\n  }, [draggable]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcTree, Object.assign({\n    itemHeight: 20,\n    ref: ref,\n    virtual: virtual\n  }, newProps, {\n    prefixCls: prefixCls,\n    className: classNames({\n      [`${prefixCls}-icon-hide`]: !showIcon,\n      [`${prefixCls}-block-node`]: blockNode,\n      [`${prefixCls}-unselectable`]: !selectable,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    }, className, hashId),\n    direction: direction,\n    checkable: checkable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-checkbox-inner`\n    }) : checkable,\n    selectable: selectable,\n    switcherIcon: nodeProps => renderSwitcherIcon(prefixCls, switcherIcon, showLine, nodeProps),\n    draggable: draggableConfig\n  }), children));\n});\nexport default Tree;"]},"metadata":{},"sourceType":"module"}