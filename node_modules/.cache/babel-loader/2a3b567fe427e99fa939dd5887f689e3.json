{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Cell from \"../Cell\";\nimport BodyContext from \"../context/BodyContext\";\nimport TableContext from \"../context/TableContext\";\nimport { useContextSelector } from \"../ContextSelector\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport ExpandedRow from \"./ExpandedRow\";\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      scopeCellComponent = props.scopeCellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _useContextSelector = useContextSelector(TableContext, ['prefixCls', 'fixedInfoList']),\n      prefixCls = _useContextSelector.prefixCls,\n      fixedInfoList = _useContextSelector.fixedInfoList;\n\n  var _useContextSelector2 = useContextSelector(BodyContext, ['flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex']),\n      flattenColumns = _useContextSelector2.flattenColumns,\n      expandableType = _useContextSelector2.expandableType,\n      expandRowByClick = _useContextSelector2.expandRowByClick,\n      onTriggerExpand = _useContextSelector2.onTriggerExpand,\n      rowClassName = _useContextSelector2.rowClassName,\n      expandedRowClassName = _useContextSelector2.expandedRowClassName,\n      indentSize = _useContextSelector2.indentSize,\n      expandIcon = _useContextSelector2.expandIcon,\n      expandedRowRender = _useContextSelector2.expandedRowRender,\n      expandIconColumnIndex = _useContextSelector2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, index);\n\n  var onClick = function onClick(event) {\n    var _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onCl = additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      scope: column.rowScope,\n      component: column.rowScope ? scopeCellComponent : cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/rc-table/es/Body/BodyRow.js"],"names":["_extends","_objectSpread","_slicedToArray","classNames","React","Cell","BodyContext","TableContext","useContextSelector","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","renderIndex","rowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","scopeCellComponent","childrenColumnName","_useContextSelector","prefixCls","fixedInfoList","_useContextSelector2","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","onExpandRef","useRef","current","onInternalTriggerExpand","apply","arguments","additionalProps","onClick","event","_additionalProps$onCl","_len","length","args","Array","_key","call","concat","computeRowClassName","columnsKey","baseRowNode","createElement","map","column","colIndex","render","dataIndex","columnClassName","key","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","scope","rowScope","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","isEmpty","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,KAAK,GAAGF,KAAK,CAACE,KADlB;AAAA,MAEIC,MAAM,GAAGH,KAAK,CAACG,MAFnB;AAAA,MAGIC,KAAK,GAAGJ,KAAK,CAACI,KAHlB;AAAA,MAIIC,WAAW,GAAGL,KAAK,CAACK,WAJxB;AAAA,MAKIC,MAAM,GAAGN,KAAK,CAACM,MALnB;AAAA,MAMIC,aAAa,GAAGP,KAAK,CAACO,aAN1B;AAAA,MAOIC,YAAY,GAAGR,KAAK,CAACQ,YAPzB;AAAA,MAQIC,KAAK,GAAGT,KAAK,CAACS,KARlB;AAAA,MASIC,aAAa,GAAGV,KAAK,CAACW,MAT1B;AAAA,MAUIA,MAAM,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,CAA3B,GAA+BA,aAV5C;AAAA,MAWIE,YAAY,GAAGZ,KAAK,CAACa,YAXzB;AAAA,MAYIC,aAAa,GAAGd,KAAK,CAACc,aAZ1B;AAAA,MAaIC,kBAAkB,GAAGf,KAAK,CAACe,kBAb/B;AAAA,MAcIC,kBAAkB,GAAGhB,KAAK,CAACgB,kBAd/B;;AAgBA,MAAIC,mBAAmB,GAAGrB,kBAAkB,CAACD,YAAD,EAAe,CAAC,WAAD,EAAc,eAAd,CAAf,CAA5C;AAAA,MACIuB,SAAS,GAAGD,mBAAmB,CAACC,SADpC;AAAA,MAEIC,aAAa,GAAGF,mBAAmB,CAACE,aAFxC;;AAIA,MAAIC,oBAAoB,GAAGxB,kBAAkB,CAACF,WAAD,EAAc,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,kBAArC,EAAyD,iBAAzD,EAA4E,cAA5E,EAA4F,sBAA5F,EAAoH,YAApH,EAAkI,YAAlI,EAAgJ,mBAAhJ,EAAqK,uBAArK,CAAd,CAA7C;AAAA,MACI2B,cAAc,GAAGD,oBAAoB,CAACC,cAD1C;AAAA,MAEIC,cAAc,GAAGF,oBAAoB,CAACE,cAF1C;AAAA,MAGIC,gBAAgB,GAAGH,oBAAoB,CAACG,gBAH5C;AAAA,MAIIC,eAAe,GAAGJ,oBAAoB,CAACI,eAJ3C;AAAA,MAKIC,YAAY,GAAGL,oBAAoB,CAACK,YALxC;AAAA,MAMIC,oBAAoB,GAAGN,oBAAoB,CAACM,oBANhD;AAAA,MAOIC,UAAU,GAAGP,oBAAoB,CAACO,UAPtC;AAAA,MAQIC,UAAU,GAAGR,oBAAoB,CAACQ,UARtC;AAAA,MASIC,iBAAiB,GAAGT,oBAAoB,CAACS,iBAT7C;AAAA,MAUIC,qBAAqB,GAAGV,oBAAoB,CAACU,qBAVjD;;AAYA,MAAIC,eAAe,GAAGvC,KAAK,CAACwC,QAAN,CAAe,KAAf,CAAtB;AAAA,MACIC,gBAAgB,GAAG3C,cAAc,CAACyC,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,YAAY,GAAGD,gBAAgB,CAAC,CAAD,CAFnC;AAAA,MAGIE,eAAe,GAAGF,gBAAgB,CAAC,CAAD,CAHtC;;AAKA,MAAIG,QAAQ,GAAG5B,YAAY,IAAIA,YAAY,CAAC6B,GAAb,CAAiBrC,KAAK,CAACsC,SAAvB,CAA/B;AACA9C,EAAAA,KAAK,CAAC+C,SAAN,CAAgB,YAAY;AAC1B,QAAIH,QAAJ,EAAc;AACZD,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACC,QAAD,CAJH;AAKA,MAAII,gBAAgB,GAAGlB,cAAc,KAAK,KAAnB,KAA6B,CAACf,aAAD,IAAkBA,aAAa,CAACJ,MAAD,CAA5D,CAAvB,CA5CsB,CA4CwE;;AAE9F,MAAIsC,cAAc,GAAGnB,cAAc,KAAK,MAAxC;AACA,MAAIoB,eAAe,GAAG1B,kBAAkB,IAAIb,MAAtB,IAAgCA,MAAM,CAACa,kBAAD,CAA5D;AACA,MAAI2B,gBAAgB,GAAGH,gBAAgB,IAAIC,cAA3C,CAhDsB,CAgDqC;;AAE3D,MAAIG,WAAW,GAAGpD,KAAK,CAACqD,MAAN,CAAarB,eAAb,CAAlB;AACAoB,EAAAA,WAAW,CAACE,OAAZ,GAAsBtB,eAAtB;;AAEA,MAAIuB,uBAAuB,GAAG,SAASA,uBAAT,GAAmC;AAC/DH,IAAAA,WAAW,CAACE,OAAZ,CAAoBE,KAApB,CAA0BJ,WAA1B,EAAuCK,SAAvC;AACD,GAFD,CArDsB,CAuDnB;;;AAGH,MAAIC,eAAe,GAAGzC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACN,MAAD,EAASC,KAAT,CAAzE;;AAEA,MAAI+C,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpC,QAAIC,qBAAJ;;AAEA,QAAI9B,gBAAgB,IAAIoB,gBAAxB,EAA0C;AACxCI,MAAAA,uBAAuB,CAAC5C,MAAD,EAASiD,KAAT,CAAvB;AACD;;AAED,SAAK,IAAIE,IAAI,GAAGL,SAAS,CAACM,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEI,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGJ,IAA9F,EAAoGI,IAAI,EAAxG,EAA4G;AAC1GF,MAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBT,SAAS,CAACS,IAAD,CAA1B;AACD;;AAEDR,IAAAA,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkE,CAACG,qBAAqB,GAAGH,eAAe,CAACC,OAAzC,MAAsD,IAAtD,IAA8DE,qBAAqB,KAAK,KAAK,CAA7F,GAAiG,KAAK,CAAtG,GAA0GA,qBAAqB,CAACM,IAAtB,CAA2BX,KAA3B,CAAiCK,qBAAjC,EAAwD,CAACH,eAAD,EAAkBE,KAAlB,EAAyBQ,MAAzB,CAAgCJ,IAAhC,CAAxD,CAA5K;AACD,GAZD,CA5DsB,CAwEnB;;;AAGH,MAAIK,mBAAJ;;AAEA,MAAI,OAAOpC,YAAP,KAAwB,QAA5B,EAAsC;AACpCoC,IAAAA,mBAAmB,GAAGpC,YAAtB;AACD,GAFD,MAEO,IAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AAC7CoC,IAAAA,mBAAmB,GAAGpC,YAAY,CAACtB,MAAD,EAASC,KAAT,EAAgBO,MAAhB,CAAlC;AACD;;AAED,MAAImD,UAAU,GAAGjE,aAAa,CAACwB,cAAD,CAA9B;AACA,MAAI0C,WAAW,GAAG,aAAavE,KAAK,CAACwE,aAAN,CAAoBpD,YAApB,EAAkCxB,QAAQ,CAAC,EAAD,EAAK8D,eAAL,EAAsB;AAC7F,oBAAgB5C,MAD6E;AAE7FL,IAAAA,SAAS,EAAEV,UAAU,CAACU,SAAD,EAAY,GAAG2D,MAAH,CAAU1C,SAAV,EAAqB,MAArB,CAAZ,EAA0C,GAAG0C,MAAH,CAAU1C,SAAV,EAAqB,aAArB,EAAoC0C,MAApC,CAA2CjD,MAA3C,CAA1C,EAA8FkD,mBAA9F,EAAmHX,eAAe,IAAIA,eAAe,CAACjD,SAAtJ,CAFwE;AAG7FC,IAAAA,KAAK,EAAEb,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKa,KAAL,CAAd,EAA2BgD,eAAe,GAAGA,eAAe,CAAChD,KAAnB,GAA2B,IAArE,CAHyE;AAI7FiD,IAAAA,OAAO,EAAEA;AAJoF,GAAtB,CAA1C,EAK3B9B,cAAc,CAAC4C,GAAf,CAAmB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AACjD,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AAAA,QACIC,SAAS,GAAGH,MAAM,CAACG,SADvB;AAAA,QAEIC,eAAe,GAAGJ,MAAM,CAACjE,SAF7B;AAGA,QAAIsE,GAAG,GAAGT,UAAU,CAACK,QAAD,CAApB;AACA,QAAIK,SAAS,GAAGrD,aAAa,CAACgD,QAAD,CAA7B,CALiD,CAKR;;AAEzC,QAAIM,cAAJ;;AAEA,QAAIN,QAAQ,MAAMrC,qBAAqB,IAAI,CAA/B,CAAR,IAA6CW,cAAjD,EAAiE;AAC/DgC,MAAAA,cAAc,GAAG,aAAajF,KAAK,CAACwE,aAAN,CAAoBxE,KAAK,CAACkF,QAA1B,EAAoC,IAApC,EAA0C,aAAalF,KAAK,CAACwE,aAAN,CAAoB,MAApB,EAA4B;AAC/G9D,QAAAA,KAAK,EAAE;AACLyE,UAAAA,WAAW,EAAE,GAAGf,MAAH,CAAUjC,UAAU,GAAGhB,MAAvB,EAA+B,IAA/B;AADR,SADwG;AAI/GV,QAAAA,SAAS,EAAE,GAAG2D,MAAH,CAAU1C,SAAV,EAAqB,2BAArB,EAAkD0C,MAAlD,CAAyDjD,MAAzD;AAJoG,OAA5B,CAAvD,EAK1BiB,UAAU,CAAC;AACbV,QAAAA,SAAS,EAAEA,SADE;AAEbkB,QAAAA,QAAQ,EAAEA,QAFG;AAGbwC,QAAAA,UAAU,EAAElC,eAHC;AAIbvC,QAAAA,MAAM,EAAEA,MAJK;AAKb0E,QAAAA,QAAQ,EAAE9B;AALG,OAAD,CALgB,CAA9B;AAYD;;AAED,QAAI+B,mBAAJ;;AAEA,QAAIZ,MAAM,CAACa,MAAX,EAAmB;AACjBD,MAAAA,mBAAmB,GAAGZ,MAAM,CAACa,MAAP,CAAc5E,MAAd,EAAsBC,KAAtB,CAAtB;AACD;;AAED,WAAO,aAAaZ,KAAK,CAACwE,aAAN,CAAoBvE,IAApB,EAA0BL,QAAQ,CAAC;AACrDa,MAAAA,SAAS,EAAEqE,eAD0C;AAErDU,MAAAA,QAAQ,EAAEd,MAAM,CAACc,QAFoC;AAGrDC,MAAAA,KAAK,EAAEf,MAAM,CAACe,KAHuC;AAIrDC,MAAAA,KAAK,EAAEhB,MAAM,CAACiB,QAJuC;AAKrDC,MAAAA,SAAS,EAAElB,MAAM,CAACiB,QAAP,GAAkBpE,kBAAlB,GAAuCD,aALG;AAMrDI,MAAAA,SAAS,EAAEA,SAN0C;AAOrDqD,MAAAA,GAAG,EAAEA,GAPgD;AAQrDpE,MAAAA,MAAM,EAAEA,MAR6C;AASrDC,MAAAA,KAAK,EAAEA,KAT8C;AAUrDC,MAAAA,WAAW,EAAEA,WAVwC;AAWrDgE,MAAAA,SAAS,EAAEA,SAX0C;AAYrDD,MAAAA,MAAM,EAAEA,MAZ6C;AAarDiB,MAAAA,gBAAgB,EAAEnB,MAAM,CAACmB,gBAb4B;AAcrDjD,MAAAA,QAAQ,EAAEqC,cAAc,IAAIrC;AAdyB,KAAD,EAenDoC,SAfmD,EAexC;AACZc,MAAAA,UAAU,EAAEb,cADA;AAEZvB,MAAAA,eAAe,EAAE4B;AAFL,KAfwC,CAAlC,CAApB;AAmBD,GAjDG,CAL2B,CAA/B,CApFsB,CA0IjB;;AAEL,MAAIS,aAAJ;;AAEA,MAAI/C,gBAAgB,KAAKN,YAAY,IAAIE,QAArB,CAApB,EAAoD;AAClD,QAAIoD,aAAa,GAAG3D,iBAAiB,CAAC1B,MAAD,EAASC,KAAT,EAAgBO,MAAM,GAAG,CAAzB,EAA4ByB,QAA5B,CAArC;AACA,QAAIqD,4BAA4B,GAAG/D,oBAAoB,IAAIA,oBAAoB,CAACvB,MAAD,EAASC,KAAT,EAAgBO,MAAhB,CAA/E;AACA4E,IAAAA,aAAa,GAAG,aAAa/F,KAAK,CAACwE,aAAN,CAAoBlE,WAApB,EAAiC;AAC5DsC,MAAAA,QAAQ,EAAEA,QADkD;AAE5DnC,MAAAA,SAAS,EAAEV,UAAU,CAAC,GAAGqE,MAAH,CAAU1C,SAAV,EAAqB,eAArB,CAAD,EAAwC,GAAG0C,MAAH,CAAU1C,SAAV,EAAqB,sBAArB,EAA6C0C,MAA7C,CAAoDjD,MAAM,GAAG,CAA7D,CAAxC,EAAyG8E,4BAAzG,CAFuC;AAG5DvE,MAAAA,SAAS,EAAEA,SAHiD;AAI5DkE,MAAAA,SAAS,EAAExE,YAJiD;AAK5DE,MAAAA,aAAa,EAAEA,aAL6C;AAM5D4E,MAAAA,OAAO,EAAErE,cAAc,CAACkC,MANoC;AAO5DoC,MAAAA,OAAO,EAAE;AAPmD,KAAjC,EAQ1BH,aAR0B,CAA7B;AASD;;AAED,SAAO,aAAahG,KAAK,CAACwE,aAAN,CAAoBxE,KAAK,CAACkF,QAA1B,EAAoC,IAApC,EAA0CX,WAA1C,EAAuDwB,aAAvD,CAApB;AACD;;AAEDxF,OAAO,CAAC6F,WAAR,GAAsB,SAAtB;AACA,eAAe7F,OAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Cell from \"../Cell\";\nimport BodyContext from \"../context/BodyContext\";\nimport TableContext from \"../context/TableContext\";\nimport { useContextSelector } from \"../ContextSelector\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport ExpandedRow from \"./ExpandedRow\";\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      renderIndex = props.renderIndex,\n      rowKey = props.rowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      scopeCellComponent = props.scopeCellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _useContextSelector = useContextSelector(TableContext, ['prefixCls', 'fixedInfoList']),\n      prefixCls = _useContextSelector.prefixCls,\n      fixedInfoList = _useContextSelector.fixedInfoList;\n\n  var _useContextSelector2 = useContextSelector(BodyContext, ['flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex']),\n      flattenColumns = _useContextSelector2.flattenColumns,\n      expandableType = _useContextSelector2.expandableType,\n      expandRowByClick = _useContextSelector2.expandRowByClick,\n      onTriggerExpand = _useContextSelector2.onTriggerExpand,\n      rowClassName = _useContextSelector2.rowClassName,\n      expandedRowClassName = _useContextSelector2.expandedRowClassName,\n      indentSize = _useContextSelector2.indentSize,\n      expandIcon = _useContextSelector2.expandIcon,\n      expandedRowRender = _useContextSelector2.expandedRowRender,\n      expandIconColumnIndex = _useContextSelector2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // ======================== Expandable =========================\n\n  var onExpandRef = React.useRef(onTriggerExpand);\n  onExpandRef.current = onTriggerExpand;\n\n  var onInternalTriggerExpand = function onInternalTriggerExpand() {\n    onExpandRef.current.apply(onExpandRef, arguments);\n  }; // =========================== onRow ===========================\n\n\n  var additionalProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, index);\n\n  var onClick = function onClick(event) {\n    var _additionalProps$onCl;\n\n    if (expandRowByClick && mergedExpandable) {\n      onInternalTriggerExpand(record, event);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    additionalProps === null || additionalProps === void 0 ? void 0 : (_additionalProps$onCl = additionalProps.onClick) === null || _additionalProps$onCl === void 0 ? void 0 : _additionalProps$onCl.call.apply(_additionalProps$onCl, [additionalProps, event].concat(args));\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = /*#__PURE__*/React.createElement(RowComponent, _extends({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onInternalTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, _extends({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      scope: column.rowScope,\n      component: column.rowScope ? scopeCellComponent : cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      renderIndex: renderIndex,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate,\n      expanded: appendCellNode && expanded\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = /*#__PURE__*/React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      component: RowComponent,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length,\n      isEmpty: false\n    }, expandContent);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, baseRowNode, expandRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}