{"ast":null,"code":"import { initZoomMotion } from '../../style/motion';\nimport { genComponentStyleHook, mergeToken, PresetColors } from '../../theme/internal';\nimport { resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\n\nconst generatorTooltipPresetColor = token => {\n  const {\n    componentCls\n  } = token;\n  return PresetColors.reduce((previousValue, currentValue) => {\n    const lightColor = token[`${currentValue}-6`];\n    previousValue[`&${componentCls}-${currentValue}`] = {\n      [`${componentCls}-inner`]: {\n        backgroundColor: lightColor\n      },\n      [`${componentCls}-arrow`]: {\n        '--antd-arrow-background-color': lightColor\n      }\n    };\n    return previousValue;\n  }, {});\n};\n\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      '&': [{\n        width: 'max-content'\n      }, {\n        width: 'intrinsic'\n      }],\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: tooltipBorderRadius > MAX_VERTICAL_CONTENT_RADIUS ? MAX_VERTICAL_CONTENT_RADIUS : tooltipBorderRadius\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), generatorTooltipPresetColor(token)), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  }, // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    showArrowCls: '',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }), // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none'\n    }\n  }];\n}; // ============================== Export ==============================\n\n\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/tooltip/style/index.js"],"names":["initZoomMotion","genComponentStyleHook","mergeToken","PresetColors","resetComponent","getArrowStyle","MAX_VERTICAL_CONTENT_RADIUS","generatorTooltipPresetColor","token","componentCls","reduce","previousValue","currentValue","lightColor","backgroundColor","genTooltipStyle","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","tooltipRadiusOuter","Object","assign","position","zIndex","display","width","maxWidth","visibility","minWidth","minHeight","padding","color","textAlign","textDecoration","wordWrap","borderRadius","boxShadow","join","direction","borderRadiusOuter","colorBg","showArrowCls","contentRadius","limitVerticalRadius","prefixCls","injectStyle","useOriginHook","colorTextLightSolid","colorBgDefault","TooltipToken","_ref","zIndexPopupBase","colorBgSpotlight"],"mappings":"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","sourcesContent":["import { initZoomMotion } from '../../style/motion';\nimport { genComponentStyleHook, mergeToken, PresetColors } from '../../theme/internal';\nimport { resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nconst generatorTooltipPresetColor = token => {\n  const {\n    componentCls\n  } = token;\n  return PresetColors.reduce((previousValue, currentValue) => {\n    const lightColor = token[`${currentValue}-6`];\n    previousValue[`&${componentCls}-${currentValue}`] = {\n      [`${componentCls}-inner`]: {\n        backgroundColor: lightColor\n      },\n      [`${componentCls}-arrow`]: {\n        '--antd-arrow-background-color': lightColor\n      }\n    };\n    return previousValue;\n  }, {});\n};\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      '&': [{\n        width: 'max-content'\n      }, {\n        width: 'intrinsic'\n      }],\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: tooltipBorderRadius > MAX_VERTICAL_CONTENT_RADIUS ? MAX_VERTICAL_CONTENT_RADIUS : tooltipBorderRadius\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), generatorTooltipPresetColor(token)), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    showArrowCls: '',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none'\n    }\n  }];\n};\n// ============================== Export ==============================\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});"]},"metadata":{},"sourceType":"module"}