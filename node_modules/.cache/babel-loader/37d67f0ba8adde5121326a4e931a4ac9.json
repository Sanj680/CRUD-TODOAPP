{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\src\\\\components\\\\Todo.js\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport { DeleteOutlined } from \"@ant-design/icons/lib/icons\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Checkbox } from \"antd\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!newName.trim()) {\n      return;\n    }\n\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const onChange = e => {\n    console.log(`checked = ${e.target.checked}`);\n  };\n\n  const editingTemplate = /*#__PURE__*/React.createElement(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"todo-label\",\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"New name for \", props.name), /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    className: \"todo-text\",\n    type: \"text\",\n    value: newName || props.name,\n    onChange: handleChange,\n    ref: editFieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn todo-cancel\",\n    onClick: () => setEditing(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Cancel\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"renaming \", props.name)), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"btn btn__primary todo-edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Save\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"new name for \", props.name))));\n  const viewTemplate = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundcolor: 'grey'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stack-small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    id: props.id,\n    type: \"checkbox\",\n    defaultChecked: props.completed,\n    onChange: () => props.toggleTaskCompleted(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"todo-label\",\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, props.name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(EditOutlined, {\n    style: {\n      height: 40,\n      marginTop: -30,\n      color: \" green \",\n      marginRight: 10\n    },\n    type: \"button\",\n    className: \"btnn\",\n    onClick: () => setEditing(true),\n    ref: editButtonRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 18\n    }\n  }, props.name)), /*#__PURE__*/React.createElement(DeleteOutlined, {\n    style: {\n      height: 40,\n      marginTop: -30,\n      color: \" red\"\n    },\n    type: \"button\",\n    className: \"btn1\",\n    onClick: () => props.deleteTask(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }\n  }, \"Delete \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"visually-hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 20\n    }\n  }, props.name)))));\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 10\n    }\n  }, isEditing ? editingTemplate : viewTemplate);\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/src/components/Todo.js"],"names":["EditOutlined","DeleteOutlined","React","useEffect","useRef","useState","Button","Checkbox","usePrevious","value","ref","current","Todo","props","isEditing","setEditing","newName","setNewName","editFieldRef","editButtonRef","wasEditing","handleChange","e","target","handleSubmit","preventDefault","trim","editTask","id","onChange","console","log","checked","editingTemplate","name","viewTemplate","backgroundcolor","completed","toggleTaskCompleted","height","marginTop","color","marginRight","deleteTask","focus"],"mappings":"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","sourcesContent":["import { EditOutlined } from \"@ant-design/icons\";\nimport { DeleteOutlined } from \"@ant-design/icons/lib/icons\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Checkbox } from \"antd\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!newName.trim()) {\n      return;\n    }\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const onChange = (e) => {\n    console.log(`checked = ${e.target.checked}`);\n  };\n\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName || props.name}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n\n        <Button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </Button>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </Button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div style={{backgroundcolor :'grey'}}>\n    <div className=\"stack-small\">\n     \n            <Checkbox \n            \n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n            >\n            </Checkbox>\n          \n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        \n\n\n  \n\n\n\n<div>\n        \n        <EditOutlined\n         style = { { height : 40 ,marginTop: -30,color : \" green \", marginRight: 10 } }\n          type=\"button\"\n          className=\"btnn\"\n          onClick={() => setEditing(true)}\n          ref={editButtonRef}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n        </EditOutlined>\n\n         <DeleteOutlined\n          style = { { height : 40 ,marginTop: -30,color : \" red\"} }\n            type=\"button\"\n            className=\"btn1\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </DeleteOutlined>\n        </div>\n        </div>\n        </div>\n  );\n\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n"]},"metadata":{},"sourceType":"module"}