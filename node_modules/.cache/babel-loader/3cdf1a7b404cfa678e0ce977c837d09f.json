{"ast":null,"code":"import * as React from 'react';\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells || val === '-') {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n      var int = cells[2] || '0';\n      var decimal = cells[4] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = decimal.padEnd(precision, '0').slice(0, precision > 0 ? precision : 0);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [/*#__PURE__*/React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, int), decimal && /*#__PURE__*/React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nexport default StatisticNumber;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/statistic/Number.js"],"names":["React","StatisticNumber","props","value","formatter","precision","decimalSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","padEnd","slice","createElement","key","className"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA,MAE7BC,KAF6B,GAQ3BD,KAR2B,CAE7BC,KAF6B;AAAA,MAG7BC,SAH6B,GAQ3BF,KAR2B,CAG7BE,SAH6B;AAAA,MAI7BC,SAJ6B,GAQ3BH,KAR2B,CAI7BG,SAJ6B;AAAA,MAK7BC,gBAL6B,GAQ3BJ,KAR2B,CAK7BI,gBAL6B;AAAA,8BAQ3BJ,KAR2B,CAM7BK,cAN6B;AAAA,MAM7BA,cAN6B,sCAMZ,EANY;AAAA,MAO7BC,SAP6B,GAQ3BN,KAR2B,CAO7BM,SAP6B;AAS/B,MAAIC,SAAJ;;AACA,MAAI,OAAOL,SAAP,KAAqB,UAAzB,EAAqC;AACnC;AACAK,IAAAA,SAAS,GAAGL,SAAS,CAACD,KAAD,CAArB;AACD,GAHD,MAGO;AACL;AACA,QAAMO,GAAG,GAAGC,MAAM,CAACR,KAAD,CAAlB;AACA,QAAMS,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAd,CAHK,CAIL;;AACA,QAAI,CAACD,KAAD,IAAUF,GAAG,KAAK,GAAtB,EAA2B;AACzBD,MAAAA,SAAS,GAAGC,GAAZ;AACD,KAFD,MAEO;AACL,UAAMI,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAtB;AACA,UAAIG,GAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;AACA,UAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACAG,MAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCV,cAArC,CAAN;;AACA,UAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjCW,QAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeb,SAAf,EAA0B,GAA1B,EAA+Bc,KAA/B,CAAqC,CAArC,EAAwCd,SAAS,GAAG,CAAZ,GAAgBA,SAAhB,GAA4B,CAApE,CAAV;AACD;;AACD,UAAIW,OAAJ,EAAa;AACXA,QAAAA,OAAO,aAAMV,gBAAN,SAAyBU,OAAzB,CAAP;AACD;;AACDP,MAAAA,SAAS,GAAG,CAAC,aAAaT,KAAK,CAACoB,aAAN,CAAoB,MAApB,EAA4B;AACpDC,QAAAA,GAAG,EAAE,KAD+C;AAEpDC,QAAAA,SAAS,YAAKd,SAAL;AAF2C,OAA5B,EAGvBM,QAHuB,EAGbC,GAHa,CAAd,EAGOC,OAAO,IAAI,aAAahB,KAAK,CAACoB,aAAN,CAAoB,MAApB,EAA4B;AACrEC,QAAAA,GAAG,EAAE,SADgE;AAErEC,QAAAA,SAAS,YAAKd,SAAL;AAF4D,OAA5B,EAGxCQ,OAHwC,CAH/B,CAAZ;AAOD;AACF;;AACD,SAAO,aAAahB,KAAK,CAACoB,aAAN,CAAoB,MAApB,EAA4B;AAC9CE,IAAAA,SAAS,YAAKd,SAAL;AADqC,GAA5B,EAEjBC,SAFiB,CAApB;AAGD,CA3CD;;AA4CA,eAAeR,eAAf","sourcesContent":["import * as React from 'react';\nconst StatisticNumber = props => {\n  const {\n    value,\n    formatter,\n    precision,\n    decimalSeparator,\n    groupSeparator = '',\n    prefixCls\n  } = props;\n  let valueNode;\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    const val = String(value);\n    const cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n    // Process if illegal number\n    if (!cells || val === '-') {\n      valueNode = val;\n    } else {\n      const negative = cells[1];\n      let int = cells[2] || '0';\n      let decimal = cells[4] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n      if (typeof precision === 'number') {\n        decimal = decimal.padEnd(precision, '0').slice(0, precision > 0 ? precision : 0);\n      }\n      if (decimal) {\n        decimal = `${decimalSeparator}${decimal}`;\n      }\n      valueNode = [/*#__PURE__*/React.createElement(\"span\", {\n        key: \"int\",\n        className: `${prefixCls}-content-value-int`\n      }, negative, int), decimal && /*#__PURE__*/React.createElement(\"span\", {\n        key: \"decimal\",\n        className: `${prefixCls}-content-value-decimal`\n      }, decimal)];\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-content-value`\n  }, valueNode);\n};\nexport default StatisticNumber;"]},"metadata":{},"sourceType":"module"}