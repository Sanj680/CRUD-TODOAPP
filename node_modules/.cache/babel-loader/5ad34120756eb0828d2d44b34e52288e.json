{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{EditOutlined}from\"@ant-design/icons\";import{DeleteOutlined}from\"@ant-design/icons/lib/icons\";import React,{useEffect,useRef,useState}from\"react\";import{Button,Checkbox}from\"antd\";import TextArea from\"antd/es/input/TextArea\";function usePrevious(value){var ref=useRef();useEffect(function(){ref.current=value;});return ref.current;}export default function Todo(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isEditing=_useState2[0],setEditing=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newName=_useState4[0],setNewName=_useState4[1];var editFieldRef=useRef(null);var editButtonRef=useRef(null);var wasEditing=usePrevious(isEditing);function handleChange(e){setNewName(e.target.value);}function handleSubmit(e){e.preventDefault();if(!newName.trim()){return;}props.editTask(props.id,newName);setNewName(\"\");setEditing(false);}var onChange=function onChange(e){console.log(\"checked = \".concat(e.target.checked));};var editingTemplate=/*#__PURE__*/React.createElement(\"form\",{className:\"stack-small\",onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",{className:\"todo-label\",htmlFor:props.id},\"New name for \",props.name),/*#__PURE__*/React.createElement(TextArea,{id:props.id,className:\"todo-text\",type:\"text\",value:newName||props.name,onChange:handleChange,ref:editFieldRef})),/*#__PURE__*/React.createElement(\"div\",{className:\"btn-group\"},/*#__PURE__*/React.createElement(Button,{type:\"button\",className:\"btn todo-cancel\",onClick:function onClick(){return setEditing(false);}},\"Cancel\",/*#__PURE__*/React.createElement(\"span\",{className:\"visually-hidden\"},\"renaming \",props.name)),/*#__PURE__*/React.createElement(Button,{type:\"primary\",htmlType:\"submit\",className:\"btn btn__primary todo-edit\"},\"Save\",/*#__PURE__*/React.createElement(\"span\",{className:\"visually-hidden\"},\"new name for \",props.name))));var viewTemplate=/*#__PURE__*/React.createElement(\"div\",{className:\"stack-small\"},/*#__PURE__*/React.createElement(Checkbox,{id:props.id,type:\"checkbox\",defaultChecked:props.completed,onChange:function onChange(){return props.toggleTaskCompleted(props.id);}}),/*#__PURE__*/React.createElement(\"label\",{className:\"todo-label\",htmlFor:props.id},props.name),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(EditOutlined,{style:{height:40,marginTop:-30,color:\" green \",marginRight:10},type:\"button\",className:\"btnn\",onClick:function onClick(){return setEditing(true);},ref:editButtonRef},\"Edit \",/*#__PURE__*/React.createElement(\"span\",{className:\"visually-hidden\"},props.name)),/*#__PURE__*/React.createElement(DeleteOutlined,{style:{height:40,marginTop:-30,color:\" red\"},type:\"button\",className:\"btn1\",onClick:function onClick(){return props.deleteTask(props.id);}},\"Delete \",/*#__PURE__*/React.createElement(\"span\",{className:\"visually-hidden\"},props.name))));useEffect(function(){if(!wasEditing&&isEditing){editFieldRef.current.focus();}if(wasEditing&&!isEditing){editButtonRef.current.focus();}},[wasEditing,isEditing]);return/*#__PURE__*/React.createElement(\"li\",{className:\"todo\"},isEditing?editingTemplate:viewTemplate);}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/src/components/Todo.js"],"names":["EditOutlined","DeleteOutlined","React","useEffect","useRef","useState","Button","Checkbox","TextArea","usePrevious","value","ref","current","Todo","props","isEditing","setEditing","newName","setNewName","editFieldRef","editButtonRef","wasEditing","handleChange","e","target","handleSubmit","preventDefault","trim","editTask","id","onChange","console","log","checked","editingTemplate","name","viewTemplate","completed","toggleTaskCompleted","height","marginTop","color","marginRight","deleteTask","focus"],"mappings":"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","sourcesContent":["import { EditOutlined } from \"@ant-design/icons\";\nimport { DeleteOutlined } from \"@ant-design/icons/lib/icons\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Checkbox } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!newName.trim()) {\n      return;\n    }\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const onChange = (e) => {\n    console.log(`checked = ${e.target.checked}`);\n  };\n\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <TextArea\n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName || props.name}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n\n        <Button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </Button>\n        <Button type=\"primary\" htmlType=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </Button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div className=\"stack-small\">\n     \n            <Checkbox \n            \n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n            >\n            </Checkbox>\n          \n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        \n\n\n  \n\n\n\n<div>\n        \n        <EditOutlined\n         style = { { height : 40 ,marginTop: -30,color : \" green \", marginRight: 10 } }\n          type=\"button\"\n          className=\"btnn\"\n          onClick={() => setEditing(true)}\n          ref={editButtonRef}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n        </EditOutlined>\n\n         <DeleteOutlined\n          style = { { height : 40 ,marginTop: -30,color : \" red\"} }\n            type=\"button\"\n            className=\"btn1\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </DeleteOutlined>\n        </div>\n        </div>\n        \n  );\n\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n"]},"metadata":{},"sourceType":"module"}