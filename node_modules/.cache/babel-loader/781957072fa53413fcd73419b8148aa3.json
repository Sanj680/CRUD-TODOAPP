{"ast":null,"code":"import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    transform: 'translateX(-37.5%)'\n  },\n  '100%': {\n    transform: 'translateX(37.5%)'\n  }\n});\n\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\n\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonColor = token => ({\n  position: 'relative',\n  // fix https://github.com/ant-design/ant-design/issues/36444\n  // https://monshin.github.io/202109/css/safari-border-radius-overflow-hidden/\n\n  /* stylelint-disable-next-line property-no-vendor-prefix,value-no-vendor-prefix */\n  zIndex: 0,\n  overflow: 'hidden',\n  background: 'transparent',\n  '&::after': {\n    position: 'absolute',\n    top: 0,\n    insetInlineEnd: '-150%',\n    bottom: 0,\n    insetInlineStart: '-150%',\n    background: token.skeletonLoadingBackground,\n    animationName: skeletonClsLoading,\n    animationDuration: token.skeletonLoadingMotionDuration,\n    animationTimingFunction: 'ease',\n    animationIterationCount: 'infinite',\n    content: '\"\"'\n  }\n});\n\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    color,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\n\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\n\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    color,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\n\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\n\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n}; // =============================== Base ===============================\n\n\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color,\n    padding,\n    marginSM,\n    borderRadius,\n    skeletonTitleHeight,\n    skeletonBlockRadius,\n    skeletonParagraphLineHeight,\n    controlHeightXS,\n    skeletonParagraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: color\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: skeletonTitleHeight,\n          background: color,\n          borderRadius: skeletonBlockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: skeletonParagraphLineHeight,\n            listStyle: 'none',\n            background: color,\n            borderRadius: skeletonBlockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: skeletonParagraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    skeletonTitleHeight: token.controlHeight / 2,\n    skeletonBlockRadius: token.borderRadiusSM,\n    skeletonParagraphLineHeight: token.controlHeight / 2,\n    skeletonParagraphMarginTop: token.marginLG + token.marginXXS,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.color} 25%, ${token.colorGradientEnd} 37%, ${token.color} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  return {\n    color: colorFillContent,\n    colorGradientEnd: colorFill\n  };\n});","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/skeleton/style/index.js"],"names":["Keyframes","genComponentStyleHook","mergeToken","skeletonClsLoading","transform","genSkeletonElementCommonSize","size","height","lineHeight","genSkeletonElementAvatarSize","Object","assign","width","genSkeletonColor","token","position","zIndex","overflow","background","top","insetInlineEnd","bottom","insetInlineStart","skeletonLoadingBackground","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","content","genSkeletonElementInputSize","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","color","controlHeight","controlHeightLG","controlHeightSM","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","skeletonTitleHeight","skeletonBlockRadius","skeletonParagraphLineHeight","controlHeightXS","skeletonParagraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","skeletonToken","marginLG","marginXXS","colorGradientEnd","colorFillContent","colorFill"],"mappings":"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","sourcesContent":["import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    transform: 'translateX(-37.5%)'\n  },\n  '100%': {\n    transform: 'translateX(37.5%)'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  position: 'relative',\n  // fix https://github.com/ant-design/ant-design/issues/36444\n  // https://monshin.github.io/202109/css/safari-border-radius-overflow-hidden/\n  /* stylelint-disable-next-line property-no-vendor-prefix,value-no-vendor-prefix */\n  zIndex: 0,\n  overflow: 'hidden',\n  background: 'transparent',\n  '&::after': {\n    position: 'absolute',\n    top: 0,\n    insetInlineEnd: '-150%',\n    bottom: 0,\n    insetInlineStart: '-150%',\n    background: token.skeletonLoadingBackground,\n    animationName: skeletonClsLoading,\n    animationDuration: token.skeletonLoadingMotionDuration,\n    animationTimingFunction: 'ease',\n    animationIterationCount: 'infinite',\n    content: '\"\"'\n  }\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    color,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    color,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: color,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    color,\n    padding,\n    marginSM,\n    borderRadius,\n    skeletonTitleHeight,\n    skeletonBlockRadius,\n    skeletonParagraphLineHeight,\n    controlHeightXS,\n    skeletonParagraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: color\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: skeletonTitleHeight,\n          background: color,\n          borderRadius: skeletonBlockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: skeletonParagraphLineHeight,\n            listStyle: 'none',\n            background: color,\n            borderRadius: skeletonBlockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: skeletonParagraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    skeletonTitleHeight: token.controlHeight / 2,\n    skeletonBlockRadius: token.borderRadiusSM,\n    skeletonParagraphLineHeight: token.controlHeight / 2,\n    skeletonParagraphMarginTop: token.marginLG + token.marginXXS,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.color} 25%, ${token.colorGradientEnd} 37%, ${token.color} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  return {\n    color: colorFillContent,\n    colorGradientEnd: colorFill\n  };\n});"]},"metadata":{},"sourceType":"module"}