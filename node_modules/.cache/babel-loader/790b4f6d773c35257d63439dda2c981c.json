{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { Popup } from 'rc-tooltip';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util'; // ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\n\nexport default function PurePanel(props) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'top' : _props$placement,\n      title = props.title,\n      color = props.color,\n      overlayInnerStyle = props.overlayInnerStyle;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n\n  var _useStyle = useStyle(prefixCls, true),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1]; // Color\n\n\n  var colorInfo = parseColor(prefixCls, color);\n  var formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  var arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, \"\".concat(prefixCls, \"-pure\"), \"\".concat(prefixCls, \"-placement-\").concat(placement), className, colorInfo.className),\n    style: arrowContentStyle\n  }, /*#__PURE__*/React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/tooltip/PurePanel.js"],"names":["React","Popup","classNames","ConfigContext","useStyle","parseColor","PurePanel","props","customizePrefixCls","prefixCls","className","placement","title","color","overlayInnerStyle","useContext","getPrefixCls","wrapSSR","hashId","colorInfo","formattedOverlayInnerStyle","Object","assign","overlayStyle","arrowContentStyle","arrowStyle","createElement","style"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,MAE1BC,kBAF0B,GAQnCD,KARmC,CAErCE,SAFqC;AAAA,MAGrCC,SAHqC,GAQnCH,KARmC,CAGrCG,SAHqC;AAAA,yBAQnCH,KARmC,CAIrCI,SAJqC;AAAA,MAIrCA,SAJqC,iCAIzB,KAJyB;AAAA,MAKrCC,KALqC,GAQnCL,KARmC,CAKrCK,KALqC;AAAA,MAMrCC,KANqC,GAQnCN,KARmC,CAMrCM,KANqC;AAAA,MAOrCC,iBAPqC,GAQnCP,KARmC,CAOrCO,iBAPqC;;AAAA,0BAWnCd,KAAK,CAACe,UAAN,CAAiBZ,aAAjB,CAXmC;AAAA,MAUrCa,YAVqC,qBAUrCA,YAVqC;;AAYvC,MAAMP,SAAS,GAAGO,YAAY,CAAC,SAAD,EAAYR,kBAAZ,CAA9B;;AAZuC,kBAabJ,QAAQ,CAACK,SAAD,EAAY,IAAZ,CAbK;AAAA;AAAA,MAahCQ,OAbgC;AAAA,MAavBC,MAbuB,kBAcvC;;;AACA,MAAMC,SAAS,GAAGd,UAAU,CAACI,SAAD,EAAYI,KAAZ,CAA5B;AACA,MAAMO,0BAA0B,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,iBAAlB,CAAd,EAAoDK,SAAS,CAACI,YAA9D,CAAnC;AACA,MAAMC,iBAAiB,GAAGL,SAAS,CAACM,UAApC;AACA,SAAOR,OAAO,EAAE,aAAajB,KAAK,CAAC0B,aAAN,CAAoB,KAApB,EAA2B;AACtDhB,IAAAA,SAAS,EAAER,UAAU,CAACgB,MAAD,EAAST,SAAT,YAAuBA,SAAvB,sBAA4CA,SAA5C,wBAAmEE,SAAnE,GAAgFD,SAAhF,EAA2FS,SAAS,CAACT,SAArG,CADiC;AAEtDiB,IAAAA,KAAK,EAAEH;AAF+C,GAA3B,EAG1B,aAAaxB,KAAK,CAAC0B,aAAN,CAAoBzB,KAApB,EAA2BoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AAClEG,IAAAA,SAAS,EAAEQ,MADuD;AAElET,IAAAA,SAAS,EAAEA,SAFuD;AAGlEK,IAAAA,iBAAiB,EAAEM;AAH+C,GAAzB,CAA3B,EAIZR,KAJY,CAHa,CAAf,CAAd;AAQD","sourcesContent":["import * as React from 'react';\nimport { Popup } from 'rc-tooltip';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util';\n// ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\nexport default function PurePanel(props) {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    placement = 'top',\n    title,\n    color,\n    overlayInnerStyle\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls, true);\n  // Color\n  const colorInfo = parseColor(prefixCls, color);\n  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  const arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),\n    style: arrowContentStyle\n  }, /*#__PURE__*/React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}"]},"metadata":{},"sourceType":"module"}