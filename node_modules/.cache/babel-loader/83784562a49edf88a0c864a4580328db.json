{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport CalendarHeader from './Header';\nimport enUS from './locale/en_US';\nimport useStyle from './style';\n\nfunction generateCalendar(generateConfig) {\n  function isSameYear(date1, date2) {\n    return date1 && date2 && generateConfig.getYear(date1) === generateConfig.getYear(date2);\n  }\n\n  function isSameMonth(date1, date2) {\n    return isSameYear(date1, date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2);\n  }\n\n  function isSameDate(date1, date2) {\n    return isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);\n  }\n\n  var Calendar = function Calendar(props) {\n    var customizePrefixCls = props.prefixCls,\n        className = props.className,\n        style = props.style,\n        dateFullCellRender = props.dateFullCellRender,\n        dateCellRender = props.dateCellRender,\n        monthFullCellRender = props.monthFullCellRender,\n        monthCellRender = props.monthCellRender,\n        headerRender = props.headerRender,\n        value = props.value,\n        defaultValue = props.defaultValue,\n        disabledDate = props.disabledDate,\n        mode = props.mode,\n        validRange = props.validRange,\n        _props$fullscreen = props.fullscreen,\n        fullscreen = _props$fullscreen === void 0 ? true : _props$fullscreen,\n        onChange = props.onChange,\n        onPanelChange = props.onPanelChange,\n        onSelect = props.onSelect;\n\n    var _React$useContext = React.useContext(ConfigContext),\n        getPrefixCls = _React$useContext.getPrefixCls,\n        direction = _React$useContext.direction;\n\n    var prefixCls = getPrefixCls('picker', customizePrefixCls);\n    var calendarPrefixCls = \"\".concat(prefixCls, \"-calendar\");\n\n    var _useStyle = useStyle(prefixCls),\n        _useStyle2 = _slicedToArray(_useStyle, 2),\n        wrapSSR = _useStyle2[0],\n        hashId = _useStyle2[1];\n\n    var today = generateConfig.getNow(); // ====================== State =======================\n    // Value\n\n    var _useMergedState = useMergedState(function () {\n      return value || generateConfig.getNow();\n    }, {\n      defaultValue: defaultValue,\n      value: value\n    }),\n        _useMergedState2 = _slicedToArray(_useMergedState, 2),\n        mergedValue = _useMergedState2[0],\n        setMergedValue = _useMergedState2[1]; // Mode\n\n\n    var _useMergedState3 = useMergedState('month', {\n      value: mode\n    }),\n        _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n        mergedMode = _useMergedState4[0],\n        setMergedMode = _useMergedState4[1];\n\n    var panelMode = React.useMemo(function () {\n      return mergedMode === 'year' ? 'month' : 'date';\n    }, [mergedMode]); // Disabled Date\n\n    var mergedDisabledDate = React.useCallback(function (date) {\n      var notInRange = validRange ? generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]) : false;\n      return notInRange || !!(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date));\n    }, [disabledDate, validRange]); // ====================== Events ======================\n\n    var triggerPanelChange = function triggerPanelChange(date, newMode) {\n      onPanelChange === null || onPanelChange === void 0 ? void 0 : onPanelChange(date, newMode);\n    };\n\n    var triggerChange = function triggerChange(date) {\n      setMergedValue(date);\n\n      if (!isSameDate(date, mergedValue)) {\n        // Trigger when month panel switch month\n        if (panelMode === 'date' && !isSameMonth(date, mergedValue) || panelMode === 'month' && !isSameYear(date, mergedValue)) {\n          triggerPanelChange(date, mergedMode);\n        }\n\n        onChange === null || onChange === void 0 ? void 0 : onChange(date);\n      }\n    };\n\n    var triggerModeChange = function triggerModeChange(newMode) {\n      setMergedMode(newMode);\n      triggerPanelChange(mergedValue, newMode);\n    };\n\n    var onInternalSelect = function onInternalSelect(date) {\n      triggerChange(date);\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(date);\n    }; // ====================== Locale ======================\n\n\n    var getDefaultLocale = function getDefaultLocale() {\n      var locale = props.locale;\n      var result = Object.assign(Object.assign({}, enUS), locale);\n      result.lang = Object.assign(Object.assign({}, result.lang), (locale || {}).lang);\n      return result;\n    }; // ====================== Render ======================\n\n\n    var dateRender = React.useCallback(function (date) {\n      if (dateFullCellRender) {\n        return dateFullCellRender(date);\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameDate(today, date)))\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, String(generateConfig.getDate(date)).padStart(2, '0')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, dateCellRender && dateCellRender(date)));\n    }, [dateFullCellRender, dateCellRender]);\n    var monthRender = React.useCallback(function (date, locale) {\n      if (monthFullCellRender) {\n        return monthFullCellRender(date);\n      }\n\n      var months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(\"\".concat(prefixCls, \"-cell-inner\"), \"\".concat(calendarPrefixCls, \"-date\"), _defineProperty({}, \"\".concat(calendarPrefixCls, \"-date-today\"), isSameMonth(today, date)))\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-value\")\n      }, months[generateConfig.getMonth(date)]), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(calendarPrefixCls, \"-date-content\")\n      }, monthCellRender && monthCellRender(date)));\n    }, [monthFullCellRender, monthCellRender]);\n    return wrapSSR( /*#__PURE__*/React.createElement(LocaleReceiver, {\n      componentName: \"Calendar\",\n      defaultLocale: getDefaultLocale\n    }, function (contextLocale) {\n      var _classNames3;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(calendarPrefixCls, (_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-full\"), fullscreen), _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-mini\"), !fullscreen), _defineProperty(_classNames3, \"\".concat(calendarPrefixCls, \"-rtl\"), direction === 'rtl'), _classNames3), className, hashId),\n        style: style\n      }, headerRender ? headerRender({\n        value: mergedValue,\n        type: mergedMode,\n        onChange: onInternalSelect,\n        onTypeChange: triggerModeChange\n      }) : /*#__PURE__*/React.createElement(CalendarHeader, {\n        prefixCls: calendarPrefixCls,\n        value: mergedValue,\n        generateConfig: generateConfig,\n        mode: mergedMode,\n        fullscreen: fullscreen,\n        locale: contextLocale.lang,\n        validRange: validRange,\n        onChange: onInternalSelect,\n        onModeChange: triggerModeChange\n      }), /*#__PURE__*/React.createElement(RCPickerPanel, {\n        value: mergedValue,\n        prefixCls: prefixCls,\n        locale: contextLocale.lang,\n        generateConfig: generateConfig,\n        dateRender: dateRender,\n        monthCellRender: function monthCellRender(date) {\n          return monthRender(date, contextLocale.lang);\n        },\n        onSelect: onInternalSelect,\n        mode: panelMode,\n        picker: panelMode,\n        disabledDate: mergedDisabledDate,\n        hideHeader: true\n      }));\n    }));\n  };\n\n  return Calendar;\n}\n\nexport default generateCalendar;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/calendar/generateCalendar.js"],"names":["classNames","PickerPanel","RCPickerPanel","useMergedState","React","ConfigContext","LocaleReceiver","CalendarHeader","enUS","useStyle","generateCalendar","generateConfig","isSameYear","date1","date2","getYear","isSameMonth","getMonth","isSameDate","getDate","Calendar","props","customizePrefixCls","prefixCls","className","style","dateFullCellRender","dateCellRender","monthFullCellRender","monthCellRender","headerRender","value","defaultValue","disabledDate","mode","validRange","fullscreen","onChange","onPanelChange","onSelect","useContext","getPrefixCls","direction","calendarPrefixCls","wrapSSR","hashId","today","getNow","mergedValue","setMergedValue","mergedMode","setMergedMode","panelMode","useMemo","mergedDisabledDate","useCallback","date","notInRange","isAfter","triggerPanelChange","newMode","triggerChange","triggerModeChange","onInternalSelect","getDefaultLocale","locale","result","Object","assign","lang","dateRender","createElement","String","padStart","monthRender","months","shortMonths","getShortMonths","componentName","defaultLocale","contextLocale","type","onTypeChange","onModeChange","picker","hideHeader"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport { PickerPanel as RCPickerPanel } from 'rc-picker';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport CalendarHeader from './Header';\nimport enUS from './locale/en_US';\nimport useStyle from './style';\nfunction generateCalendar(generateConfig) {\n  function isSameYear(date1, date2) {\n    return date1 && date2 && generateConfig.getYear(date1) === generateConfig.getYear(date2);\n  }\n  function isSameMonth(date1, date2) {\n    return isSameYear(date1, date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2);\n  }\n  function isSameDate(date1, date2) {\n    return isSameMonth(date1, date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);\n  }\n  const Calendar = props => {\n    const {\n      prefixCls: customizePrefixCls,\n      className,\n      style,\n      dateFullCellRender,\n      dateCellRender,\n      monthFullCellRender,\n      monthCellRender,\n      headerRender,\n      value,\n      defaultValue,\n      disabledDate,\n      mode,\n      validRange,\n      fullscreen = true,\n      onChange,\n      onPanelChange,\n      onSelect\n    } = props;\n    const {\n      getPrefixCls,\n      direction\n    } = React.useContext(ConfigContext);\n    const prefixCls = getPrefixCls('picker', customizePrefixCls);\n    const calendarPrefixCls = `${prefixCls}-calendar`;\n    const [wrapSSR, hashId] = useStyle(prefixCls);\n    const today = generateConfig.getNow();\n    // ====================== State =======================\n    // Value\n    const [mergedValue, setMergedValue] = useMergedState(() => value || generateConfig.getNow(), {\n      defaultValue,\n      value\n    });\n    // Mode\n    const [mergedMode, setMergedMode] = useMergedState('month', {\n      value: mode\n    });\n    const panelMode = React.useMemo(() => mergedMode === 'year' ? 'month' : 'date', [mergedMode]);\n    // Disabled Date\n    const mergedDisabledDate = React.useCallback(date => {\n      const notInRange = validRange ? generateConfig.isAfter(validRange[0], date) || generateConfig.isAfter(date, validRange[1]) : false;\n      return notInRange || !!(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date));\n    }, [disabledDate, validRange]);\n    // ====================== Events ======================\n    const triggerPanelChange = (date, newMode) => {\n      onPanelChange === null || onPanelChange === void 0 ? void 0 : onPanelChange(date, newMode);\n    };\n    const triggerChange = date => {\n      setMergedValue(date);\n      if (!isSameDate(date, mergedValue)) {\n        // Trigger when month panel switch month\n        if (panelMode === 'date' && !isSameMonth(date, mergedValue) || panelMode === 'month' && !isSameYear(date, mergedValue)) {\n          triggerPanelChange(date, mergedMode);\n        }\n        onChange === null || onChange === void 0 ? void 0 : onChange(date);\n      }\n    };\n    const triggerModeChange = newMode => {\n      setMergedMode(newMode);\n      triggerPanelChange(mergedValue, newMode);\n    };\n    const onInternalSelect = date => {\n      triggerChange(date);\n      onSelect === null || onSelect === void 0 ? void 0 : onSelect(date);\n    };\n    // ====================== Locale ======================\n    const getDefaultLocale = () => {\n      const {\n        locale\n      } = props;\n      const result = Object.assign(Object.assign({}, enUS), locale);\n      result.lang = Object.assign(Object.assign({}, result.lang), (locale || {}).lang);\n      return result;\n    };\n    // ====================== Render ======================\n    const dateRender = React.useCallback(date => {\n      if (dateFullCellRender) {\n        return dateFullCellRender(date);\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n          [`${calendarPrefixCls}-date-today`]: isSameDate(today, date)\n        })\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-value`\n      }, String(generateConfig.getDate(date)).padStart(2, '0')), /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-content`\n      }, dateCellRender && dateCellRender(date)));\n    }, [dateFullCellRender, dateCellRender]);\n    const monthRender = React.useCallback((date, locale) => {\n      if (monthFullCellRender) {\n        return monthFullCellRender(date);\n      }\n      const months = locale.shortMonths || generateConfig.locale.getShortMonths(locale.locale);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(`${prefixCls}-cell-inner`, `${calendarPrefixCls}-date`, {\n          [`${calendarPrefixCls}-date-today`]: isSameMonth(today, date)\n        })\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-value`\n      }, months[generateConfig.getMonth(date)]), /*#__PURE__*/React.createElement(\"div\", {\n        className: `${calendarPrefixCls}-date-content`\n      }, monthCellRender && monthCellRender(date)));\n    }, [monthFullCellRender, monthCellRender]);\n    return wrapSSR( /*#__PURE__*/React.createElement(LocaleReceiver, {\n      componentName: \"Calendar\",\n      defaultLocale: getDefaultLocale\n    }, contextLocale => /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(calendarPrefixCls, {\n        [`${calendarPrefixCls}-full`]: fullscreen,\n        [`${calendarPrefixCls}-mini`]: !fullscreen,\n        [`${calendarPrefixCls}-rtl`]: direction === 'rtl'\n      }, className, hashId),\n      style: style\n    }, headerRender ? headerRender({\n      value: mergedValue,\n      type: mergedMode,\n      onChange: onInternalSelect,\n      onTypeChange: triggerModeChange\n    }) : /*#__PURE__*/React.createElement(CalendarHeader, {\n      prefixCls: calendarPrefixCls,\n      value: mergedValue,\n      generateConfig: generateConfig,\n      mode: mergedMode,\n      fullscreen: fullscreen,\n      locale: contextLocale.lang,\n      validRange: validRange,\n      onChange: onInternalSelect,\n      onModeChange: triggerModeChange\n    }), /*#__PURE__*/React.createElement(RCPickerPanel, {\n      value: mergedValue,\n      prefixCls: prefixCls,\n      locale: contextLocale.lang,\n      generateConfig: generateConfig,\n      dateRender: dateRender,\n      monthCellRender: date => monthRender(date, contextLocale.lang),\n      onSelect: onInternalSelect,\n      mode: panelMode,\n      picker: panelMode,\n      disabledDate: mergedDisabledDate,\n      hideHeader: true\n    }))));\n  };\n  return Calendar;\n}\nexport default generateCalendar;"]},"metadata":{},"sourceType":"module"}