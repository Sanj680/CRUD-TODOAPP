{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport HolderOutlined from \"@ant-design/icons/es/icons/HolderOutlined\";\nimport classNames from 'classnames';\nimport RcTree from 'rc-tree';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport initCollapseMotion from '../_util/motion';\nimport dropIndicatorRender from './utils/dropIndicator';\nimport renderSwitcherIcon from './utils/iconUtil';\nimport useStyle from './style';\nvar Tree = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction,\n      virtual = _React$useContext.virtual;\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      _props$showIcon = props.showIcon,\n      showIcon = _props$showIcon === void 0 ? false : _props$showIcon,\n      showLine = props.showLine,\n      _switcherIcon = props.switcherIcon,\n      _props$blockNode = props.blockNode,\n      blockNode = _props$blockNode === void 0 ? false : _props$blockNode,\n      children = props.children,\n      _props$checkable = props.checkable,\n      checkable = _props$checkable === void 0 ? false : _props$checkable,\n      _props$selectable = props.selectable,\n      selectable = _props$selectable === void 0 ? true : _props$selectable,\n      draggable = props.draggable,\n      customMotion = props.motion;\n  var prefixCls = getPrefixCls('tree', customizePrefixCls);\n  var rootPrefixCls = getPrefixCls();\n  var motion = customMotion !== null && customMotion !== void 0 ? customMotion : Object.assign(Object.assign({}, initCollapseMotion(rootPrefixCls)), {\n    motionAppear: false\n  });\n  var newProps = Object.assign(Object.assign({}, props), {\n    checkable: checkable,\n    selectable: selectable,\n    showIcon: showIcon,\n    motion: motion,\n    blockNode: blockNode,\n    showLine: Boolean(showLine),\n    dropIndicatorRender: dropIndicatorRender\n  });\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1];\n\n  var draggableConfig = React.useMemo(function () {\n    if (!draggable) {\n      return false;\n    }\n\n    var mergedDraggable = {};\n\n    switch (typeof draggable) {\n      case 'function':\n        mergedDraggable.nodeDraggable = draggable;\n        break;\n\n      case 'object':\n        mergedDraggable = Object.assign({}, draggable);\n        break;\n\n      default:\n        break;\n      // Do nothing\n    }\n\n    if (mergedDraggable.icon !== false) {\n      mergedDraggable.icon = mergedDraggable.icon || /*#__PURE__*/React.createElement(HolderOutlined, null);\n    }\n\n    return mergedDraggable;\n  }, [draggable]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcTree, Object.assign({\n    itemHeight: 20,\n    ref: ref,\n    virtual: virtual\n  }, newProps, {\n    prefixCls: prefixCls,\n    className: classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-icon-hide\"), !showIcon), _defineProperty(_classNames, \"\".concat(prefixCls, \"-block-node\"), blockNode), _defineProperty(_classNames, \"\".concat(prefixCls, \"-unselectable\"), !selectable), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className, hashId),\n    direction: direction,\n    checkable: checkable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-checkbox-inner\")\n    }) : checkable,\n    selectable: selectable,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return renderSwitcherIcon(prefixCls, _switcherIcon, showLine, nodeProps);\n    },\n    draggable: draggableConfig\n  }), children));\n});\nexport default Tree;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/tree/Tree.js"],"names":["HolderOutlined","classNames","RcTree","React","ConfigContext","initCollapseMotion","dropIndicatorRender","renderSwitcherIcon","useStyle","Tree","forwardRef","props","ref","useContext","getPrefixCls","direction","virtual","customizePrefixCls","prefixCls","className","showIcon","showLine","switcherIcon","blockNode","children","checkable","selectable","draggable","customMotion","motion","rootPrefixCls","Object","assign","motionAppear","newProps","Boolean","wrapSSR","hashId","draggableConfig","useMemo","mergedDraggable","nodeDraggable","icon","createElement","itemHeight","nodeProps"],"mappings":"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","sourcesContent":["import HolderOutlined from \"@ant-design/icons/es/icons/HolderOutlined\";\nimport classNames from 'classnames';\nimport RcTree from 'rc-tree';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport initCollapseMotion from '../_util/motion';\nimport dropIndicatorRender from './utils/dropIndicator';\nimport renderSwitcherIcon from './utils/iconUtil';\nimport useStyle from './style';\nconst Tree = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    getPrefixCls,\n    direction,\n    virtual\n  } = React.useContext(ConfigContext);\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    showIcon = false,\n    showLine,\n    switcherIcon,\n    blockNode = false,\n    children,\n    checkable = false,\n    selectable = true,\n    draggable,\n    motion: customMotion\n  } = props;\n  const prefixCls = getPrefixCls('tree', customizePrefixCls);\n  const rootPrefixCls = getPrefixCls();\n  const motion = customMotion !== null && customMotion !== void 0 ? customMotion : Object.assign(Object.assign({}, initCollapseMotion(rootPrefixCls)), {\n    motionAppear: false\n  });\n  const newProps = Object.assign(Object.assign({}, props), {\n    checkable,\n    selectable,\n    showIcon,\n    motion,\n    blockNode,\n    showLine: Boolean(showLine),\n    dropIndicatorRender\n  });\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const draggableConfig = React.useMemo(() => {\n    if (!draggable) {\n      return false;\n    }\n    let mergedDraggable = {};\n    switch (typeof draggable) {\n      case 'function':\n        mergedDraggable.nodeDraggable = draggable;\n        break;\n      case 'object':\n        mergedDraggable = Object.assign({}, draggable);\n        break;\n      default:\n        break;\n      // Do nothing\n    }\n\n    if (mergedDraggable.icon !== false) {\n      mergedDraggable.icon = mergedDraggable.icon || /*#__PURE__*/React.createElement(HolderOutlined, null);\n    }\n    return mergedDraggable;\n  }, [draggable]);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcTree, Object.assign({\n    itemHeight: 20,\n    ref: ref,\n    virtual: virtual\n  }, newProps, {\n    prefixCls: prefixCls,\n    className: classNames({\n      [`${prefixCls}-icon-hide`]: !showIcon,\n      [`${prefixCls}-block-node`]: blockNode,\n      [`${prefixCls}-unselectable`]: !selectable,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    }, className, hashId),\n    direction: direction,\n    checkable: checkable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-checkbox-inner`\n    }) : checkable,\n    selectable: selectable,\n    switcherIcon: nodeProps => renderSwitcherIcon(prefixCls, switcherIcon, showLine, nodeProps),\n    draggable: draggableConfig\n  }), children));\n});\nexport default Tree;"]},"metadata":{},"sourceType":"module"}