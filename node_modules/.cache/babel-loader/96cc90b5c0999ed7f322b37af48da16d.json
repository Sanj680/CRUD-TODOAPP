{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getStrokeColor } from './utils';\nvar CIRCLE_MIN_STROKE_WIDTH = 3;\n\nvar getMinPercent = function getMinPercent(width) {\n  return CIRCLE_MIN_STROKE_WIDTH / width * 100;\n};\n\nvar Circle = function Circle(props) {\n  var prefixCls = props.prefixCls,\n      _props$width = props.width,\n      width = _props$width === void 0 ? 120 : _props$width,\n      _props$strokeWidth = props.strokeWidth,\n      strokeWidth = _props$strokeWidth === void 0 ? Math.max(getMinPercent(width), 6) : _props$strokeWidth,\n      _props$trailColor = props.trailColor,\n      trailColor = _props$trailColor === void 0 ? null : _props$trailColor,\n      _props$strokeLinecap = props.strokeLinecap,\n      strokeLinecap = _props$strokeLinecap === void 0 ? 'round' : _props$strokeLinecap,\n      gapPosition = props.gapPosition,\n      gapDegree = props.gapDegree,\n      type = props.type,\n      children = props.children,\n      success = props.success;\n  var circleStyle = {\n    width: width,\n    height: width,\n    fontSize: width * 0.15 + 6\n  };\n  var realGapDegree = React.useMemo(function () {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n\n    if (type === 'dashboard') {\n      return 75;\n    }\n\n    return undefined;\n  }, [gapDegree, type]);\n  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined; // using className to style stroke color\n\n  var isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  var strokeColor = getStrokeColor({\n    success: success,\n    strokeColor: props.strokeColor\n  });\n  var wrapperClassName = classNames(\"\".concat(prefixCls, \"-inner\"), _defineProperty({}, \"\".concat(prefixCls, \"-circle-gradient\"), isGradient));\n  var circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, circleContent) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\n\nexport default Circle;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/progress/Circle.js"],"names":["classNames","Circle","RCCircle","React","Tooltip","getPercentage","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","strokeWidth","Math","max","trailColor","strokeLinecap","gapPosition","gapDegree","type","children","success","circleStyle","height","fontSize","realGapDegree","useMemo","undefined","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","className","style","title","Fragment"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    width = 120,\n    strokeWidth = Math.max(getMinPercent(width), 6),\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    type,\n    children,\n    success\n  } = props;\n  const circleStyle = {\n    width,\n    height: width,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, circleContent) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\nexport default Circle;"]},"metadata":{},"sourceType":"module"}