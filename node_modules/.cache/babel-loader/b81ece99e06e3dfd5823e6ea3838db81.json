{"ast":null,"code":"import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent, textEllipsis } from '../../style'; // ============================== Mixins ==============================\n\nfunction segmentedDisabledItem(cls, token) {\n  return {\n    [`${cls}, ${cls}:hover, ${cls}:focus`]: {\n      color: token.colorTextDisabled,\n      cursor: 'not-allowed'\n    }\n  };\n}\n\nfunction getSegmentedItemSelectedStyle(token) {\n  return {\n    backgroundColor: token.bgColorSelected,\n    boxShadow: token.boxShadow\n  };\n}\n\nconst segmentedTextEllipsisCss = Object.assign({\n  overflow: 'hidden'\n}, textEllipsis); // ============================== Styles ==============================\n\nconst genSegmentedStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      padding: token.segmentedContainerPadding,\n      color: token.labelColor,\n      backgroundColor: token.bgColor,\n      borderRadius: token.borderRadius,\n      transition: `all ${token.motionDurationMid} ${token.motionEaseInOut}`,\n      [`${componentCls}-group`]: {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'stretch',\n        justifyItems: 'flex-start',\n        width: '100%'\n      },\n      // RTL styles\n      '&&-rtl': {\n        direction: 'rtl'\n      },\n      // block styles\n      '&&-block': {\n        display: 'flex'\n      },\n      [`&&-block ${componentCls}-item`]: {\n        flex: 1,\n        minWidth: 0\n      },\n      // item styles\n      [`${componentCls}-item`]: {\n        position: 'relative',\n        textAlign: 'center',\n        cursor: 'pointer',\n        transition: `color ${token.motionDurationMid} ${token.motionEaseInOut}`,\n        borderRadius: token.borderRadiusSM,\n        '&-selected': Object.assign(Object.assign({}, getSegmentedItemSelectedStyle(token)), {\n          color: token.labelColorHover\n        }),\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          insetInlineStart: 0,\n          borderRadius: token.borderRadiusSM,\n          transition: `background-color ${token.motionDurationMid}`\n        },\n        [`&:hover:not(${componentCls}-item-selected):not(${componentCls}-item-disabled)`]: {\n          color: token.labelColorHover,\n          '&::after': {\n            backgroundColor: token.bgColorHover\n          }\n        },\n        '&-label': Object.assign({\n          minHeight: token.controlHeight - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeight - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontal}px`\n        }, segmentedTextEllipsisCss),\n        // syntactic sugar to add `icon` for Segmented Item\n        '&-icon + *': {\n          marginInlineStart: token.marginSM / 2\n        },\n        '&-input': {\n          position: 'absolute',\n          insetBlockStart: 0,\n          insetInlineStart: 0,\n          width: 0,\n          height: 0,\n          opacity: 0,\n          pointerEvents: 'none'\n        }\n      },\n      // size styles\n      '&&-lg': {\n        borderRadius: token.borderRadiusLG,\n        [`${componentCls}-item-label`]: {\n          minHeight: token.controlHeightLG - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeightLG - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontal}px`,\n          fontSize: token.fontSizeLG\n        },\n        [`${componentCls}-item-selected`]: {\n          borderRadius: token.borderRadius\n        }\n      },\n      '&&-sm': {\n        borderRadius: token.borderRadiusSM,\n        [`${componentCls}-item-label`]: {\n          minHeight: token.controlHeightSM - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeightSM - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontalSM}px`\n        },\n        [`${componentCls}-item-selected`]: {\n          borderRadius: token.borderRadiusXS\n        }\n      }\n    }), segmentedDisabledItem(`&-disabled ${componentCls}-item`, token)), segmentedDisabledItem(`${componentCls}-item-disabled`, token)), {\n      // thumb styles\n      [`${componentCls}-thumb`]: Object.assign(Object.assign({}, getSegmentedItemSelectedStyle(token)), {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineStart: 0,\n        width: 0,\n        height: '100%',\n        padding: `${token.paddingXXS}px 0`,\n        borderRadius: token.borderRadiusSM,\n        [`& ~ ${componentCls}-item:not(${componentCls}-item-selected):not(${componentCls}-item-disabled)::after`]: {\n          backgroundColor: 'transparent'\n        }\n      }),\n      // transition effect when `appear-active`\n      [`${componentCls}-thumb-motion-appear-active`]: {\n        transition: `transform ${token.motionDurationSlow} ${token.motionEaseInOut}, width ${token.motionDurationSlow} ${token.motionEaseInOut}`,\n        willChange: 'transform, width'\n      }\n    })\n  };\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook('Segmented', token => {\n  const {\n    lineWidthBold,\n    lineWidth,\n    colorTextLabel,\n    colorText,\n    colorFillSecondary,\n    colorBgLayout,\n    colorBgElevated\n  } = token;\n  const segmentedToken = mergeToken(token, {\n    segmentedPaddingHorizontal: token.controlPaddingHorizontal - lineWidth,\n    segmentedPaddingHorizontalSM: token.controlPaddingHorizontalSM - lineWidth,\n    segmentedContainerPadding: lineWidthBold,\n    labelColor: colorTextLabel,\n    labelColorHover: colorText,\n    bgColor: colorBgLayout,\n    bgColorHover: colorFillSecondary,\n    bgColorSelected: colorBgElevated\n  });\n  return [genSegmentedStyle(segmentedToken)];\n});","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/segmented/style/index.js"],"names":["genComponentStyleHook","mergeToken","resetComponent","textEllipsis","segmentedDisabledItem","cls","token","color","colorTextDisabled","cursor","getSegmentedItemSelectedStyle","backgroundColor","bgColorSelected","boxShadow","segmentedTextEllipsisCss","Object","assign","overflow","genSegmentedStyle","componentCls","display","padding","segmentedContainerPadding","labelColor","bgColor","borderRadius","transition","motionDurationMid","motionEaseInOut","position","alignItems","justifyItems","width","direction","flex","minWidth","textAlign","borderRadiusSM","labelColorHover","content","height","top","insetInlineStart","bgColorHover","minHeight","controlHeight","lineHeight","segmentedPaddingHorizontal","marginInlineStart","marginSM","insetBlockStart","opacity","pointerEvents","borderRadiusLG","controlHeightLG","fontSize","fontSizeLG","controlHeightSM","segmentedPaddingHorizontalSM","borderRadiusXS","paddingXXS","motionDurationSlow","willChange","lineWidthBold","lineWidth","colorTextLabel","colorText","colorFillSecondary","colorBgLayout","colorBgElevated","segmentedToken","controlPaddingHorizontal","controlPaddingHorizontalSM"],"mappings":"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","sourcesContent":["import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent, textEllipsis } from '../../style';\n// ============================== Mixins ==============================\nfunction segmentedDisabledItem(cls, token) {\n  return {\n    [`${cls}, ${cls}:hover, ${cls}:focus`]: {\n      color: token.colorTextDisabled,\n      cursor: 'not-allowed'\n    }\n  };\n}\nfunction getSegmentedItemSelectedStyle(token) {\n  return {\n    backgroundColor: token.bgColorSelected,\n    boxShadow: token.boxShadow\n  };\n}\nconst segmentedTextEllipsisCss = Object.assign({\n  overflow: 'hidden'\n}, textEllipsis);\n// ============================== Styles ==============================\nconst genSegmentedStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      padding: token.segmentedContainerPadding,\n      color: token.labelColor,\n      backgroundColor: token.bgColor,\n      borderRadius: token.borderRadius,\n      transition: `all ${token.motionDurationMid} ${token.motionEaseInOut}`,\n      [`${componentCls}-group`]: {\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'stretch',\n        justifyItems: 'flex-start',\n        width: '100%'\n      },\n      // RTL styles\n      '&&-rtl': {\n        direction: 'rtl'\n      },\n      // block styles\n      '&&-block': {\n        display: 'flex'\n      },\n      [`&&-block ${componentCls}-item`]: {\n        flex: 1,\n        minWidth: 0\n      },\n      // item styles\n      [`${componentCls}-item`]: {\n        position: 'relative',\n        textAlign: 'center',\n        cursor: 'pointer',\n        transition: `color ${token.motionDurationMid} ${token.motionEaseInOut}`,\n        borderRadius: token.borderRadiusSM,\n        '&-selected': Object.assign(Object.assign({}, getSegmentedItemSelectedStyle(token)), {\n          color: token.labelColorHover\n        }),\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          insetInlineStart: 0,\n          borderRadius: token.borderRadiusSM,\n          transition: `background-color ${token.motionDurationMid}`\n        },\n        [`&:hover:not(${componentCls}-item-selected):not(${componentCls}-item-disabled)`]: {\n          color: token.labelColorHover,\n          '&::after': {\n            backgroundColor: token.bgColorHover\n          }\n        },\n        '&-label': Object.assign({\n          minHeight: token.controlHeight - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeight - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontal}px`\n        }, segmentedTextEllipsisCss),\n        // syntactic sugar to add `icon` for Segmented Item\n        '&-icon + *': {\n          marginInlineStart: token.marginSM / 2\n        },\n        '&-input': {\n          position: 'absolute',\n          insetBlockStart: 0,\n          insetInlineStart: 0,\n          width: 0,\n          height: 0,\n          opacity: 0,\n          pointerEvents: 'none'\n        }\n      },\n      // size styles\n      '&&-lg': {\n        borderRadius: token.borderRadiusLG,\n        [`${componentCls}-item-label`]: {\n          minHeight: token.controlHeightLG - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeightLG - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontal}px`,\n          fontSize: token.fontSizeLG\n        },\n        [`${componentCls}-item-selected`]: {\n          borderRadius: token.borderRadius\n        }\n      },\n      '&&-sm': {\n        borderRadius: token.borderRadiusSM,\n        [`${componentCls}-item-label`]: {\n          minHeight: token.controlHeightSM - token.segmentedContainerPadding * 2,\n          lineHeight: `${token.controlHeightSM - token.segmentedContainerPadding * 2}px`,\n          padding: `0 ${token.segmentedPaddingHorizontalSM}px`\n        },\n        [`${componentCls}-item-selected`]: {\n          borderRadius: token.borderRadiusXS\n        }\n      }\n    }), segmentedDisabledItem(`&-disabled ${componentCls}-item`, token)), segmentedDisabledItem(`${componentCls}-item-disabled`, token)), {\n      // thumb styles\n      [`${componentCls}-thumb`]: Object.assign(Object.assign({}, getSegmentedItemSelectedStyle(token)), {\n        position: 'absolute',\n        insetBlockStart: 0,\n        insetInlineStart: 0,\n        width: 0,\n        height: '100%',\n        padding: `${token.paddingXXS}px 0`,\n        borderRadius: token.borderRadiusSM,\n        [`& ~ ${componentCls}-item:not(${componentCls}-item-selected):not(${componentCls}-item-disabled)::after`]: {\n          backgroundColor: 'transparent'\n        }\n      }),\n      // transition effect when `appear-active`\n      [`${componentCls}-thumb-motion-appear-active`]: {\n        transition: `transform ${token.motionDurationSlow} ${token.motionEaseInOut}, width ${token.motionDurationSlow} ${token.motionEaseInOut}`,\n        willChange: 'transform, width'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Segmented', token => {\n  const {\n    lineWidthBold,\n    lineWidth,\n    colorTextLabel,\n    colorText,\n    colorFillSecondary,\n    colorBgLayout,\n    colorBgElevated\n  } = token;\n  const segmentedToken = mergeToken(token, {\n    segmentedPaddingHorizontal: token.controlPaddingHorizontal - lineWidth,\n    segmentedPaddingHorizontalSM: token.controlPaddingHorizontalSM - lineWidth,\n    segmentedContainerPadding: lineWidthBold,\n    labelColor: colorTextLabel,\n    labelColorHover: colorText,\n    bgColor: colorBgLayout,\n    bgColorHover: colorFillSecondary,\n    bgColorSelected: colorBgElevated\n  });\n  return [genSegmentedStyle(segmentedToken)];\n});"]},"metadata":{},"sourceType":"module"}