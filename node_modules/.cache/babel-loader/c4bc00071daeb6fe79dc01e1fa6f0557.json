{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport default function useMutationObserver() {\n  const instance = useRef();\n\n  const destroyObserver = () => {\n    if (instance.current) {\n      instance.current.takeRecords();\n      instance.current.disconnect();\n      instance.current = undefined;\n    }\n  };\n\n  const createObserver = (target, callback) => {\n    if (MutationObserver) {\n      destroyObserver();\n      instance.current = new MutationObserver(callback);\n      instance.current.observe(target, {\n        childList: true,\n        subtree: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  };\n\n  useEffect(() => destroyObserver, []);\n\n  const reRendering = (mutation, watermarkElement) => {\n    let flag = false; // Whether to delete the watermark node\n\n    if (mutation.removedNodes.length) {\n      flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n    } // Whether the watermark dom property value has been modified\n\n\n    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n      flag = true;\n    }\n\n    return flag;\n  };\n\n  return {\n    createObserver,\n    destroyObserver,\n    reRendering\n  };\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/watermark/useMutationObserver.js"],"names":["useEffect","useRef","useMutationObserver","instance","destroyObserver","current","takeRecords","disconnect","undefined","createObserver","target","callback","MutationObserver","observe","childList","subtree","attributeFilter","reRendering","mutation","watermarkElement","flag","removedNodes","length","Array","from","some","node","type"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,eAAe,SAASC,mBAAT,GAA+B;AAC5C,QAAMC,QAAQ,GAAGF,MAAM,EAAvB;;AACA,QAAMG,eAAe,GAAG,MAAM;AAC5B,QAAID,QAAQ,CAACE,OAAb,EAAsB;AACpBF,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,WAAjB;AACAH,MAAAA,QAAQ,CAACE,OAAT,CAAiBE,UAAjB;AACAJ,MAAAA,QAAQ,CAACE,OAAT,GAAmBG,SAAnB;AACD;AACF,GAND;;AAOA,QAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC3C,QAAIC,gBAAJ,EAAsB;AACpBR,MAAAA,eAAe;AACfD,MAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAIO,gBAAJ,CAAqBD,QAArB,CAAnB;AACAR,MAAAA,QAAQ,CAACE,OAAT,CAAiBQ,OAAjB,CAAyBH,MAAzB,EAAiC;AAC/BI,QAAAA,SAAS,EAAE,IADoB;AAE/BC,QAAAA,OAAO,EAAE,IAFsB;AAG/BC,QAAAA,eAAe,EAAE,CAAC,OAAD,EAAU,OAAV;AAHc,OAAjC;AAKD;AACF,GAVD;;AAWAhB,EAAAA,SAAS,CAAC,MAAMI,eAAP,EAAwB,EAAxB,CAAT;;AACA,QAAMa,WAAW,GAAG,CAACC,QAAD,EAAWC,gBAAX,KAAgC;AAClD,QAAIC,IAAI,GAAG,KAAX,CADkD,CAElD;;AACA,QAAIF,QAAQ,CAACG,YAAT,CAAsBC,MAA1B,EAAkC;AAChCF,MAAAA,IAAI,GAAGG,KAAK,CAACC,IAAN,CAAWN,QAAQ,CAACG,YAApB,EAAkCI,IAAlC,CAAuCC,IAAI,IAAIA,IAAI,KAAKP,gBAAxD,CAAP;AACD,KALiD,CAMlD;;;AACA,QAAID,QAAQ,CAACS,IAAT,KAAkB,YAAlB,IAAkCT,QAAQ,CAACR,MAAT,KAAoBS,gBAA1D,EAA4E;AAC1EC,MAAAA,IAAI,GAAG,IAAP;AACD;;AACD,WAAOA,IAAP;AACD,GAXD;;AAYA,SAAO;AACLX,IAAAA,cADK;AAELL,IAAAA,eAFK;AAGLa,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect, useRef } from 'react';\nexport default function useMutationObserver() {\n  const instance = useRef();\n  const destroyObserver = () => {\n    if (instance.current) {\n      instance.current.takeRecords();\n      instance.current.disconnect();\n      instance.current = undefined;\n    }\n  };\n  const createObserver = (target, callback) => {\n    if (MutationObserver) {\n      destroyObserver();\n      instance.current = new MutationObserver(callback);\n      instance.current.observe(target, {\n        childList: true,\n        subtree: true,\n        attributeFilter: ['style', 'class']\n      });\n    }\n  };\n  useEffect(() => destroyObserver, []);\n  const reRendering = (mutation, watermarkElement) => {\n    let flag = false;\n    // Whether to delete the watermark node\n    if (mutation.removedNodes.length) {\n      flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);\n    }\n    // Whether the watermark dom property value has been modified\n    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {\n      flag = true;\n    }\n    return flag;\n  };\n  return {\n    createObserver,\n    destroyObserver,\n    reRendering\n  };\n}"]},"metadata":{},"sourceType":"module"}