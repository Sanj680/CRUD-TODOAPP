{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Col from '../grid/col';\nimport { useLocaleReceiver } from '../locale/LocaleReceiver';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\n\nfunction toTooltipProps(tooltip) {\n  if (!tooltip) {\n    return null;\n  }\n\n  if (typeof tooltip === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {\n    return tooltip;\n  }\n\n  return {\n    title: tooltip\n  };\n}\n\nconst FormItemLabel = _ref => {\n  let {\n    prefixCls,\n    label,\n    htmlFor,\n    labelCol,\n    labelAlign,\n    colon,\n    required,\n    requiredMark,\n    tooltip\n  } = _ref;\n  const [formLocale] = useLocaleReceiver('Form');\n  if (!label) return null;\n  return /*#__PURE__*/React.createElement(FormContext.Consumer, {\n    key: \"label\"\n  }, _ref2 => {\n    let {\n      vertical,\n      labelAlign: contextLabelAlign,\n      labelCol: contextLabelCol,\n      labelWrap,\n      colon: contextColon\n    } = _ref2;\n\n    var _a;\n\n    const mergedLabelCol = labelCol || contextLabelCol || {};\n    const mergedLabelAlign = labelAlign || contextLabelAlign;\n    const labelClsBasic = `${prefixCls}-item-label`;\n    const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className, {\n      [`${labelClsBasic}-wrap`]: !!labelWrap\n    });\n    let labelChildren = label; // Keep label is original where there should have no colon\n\n    const computedColon = colon === true || contextColon !== false && colon !== false;\n    const haveColon = computedColon && !vertical; // Remove duplicated user input colon\n\n    if (haveColon && typeof label === 'string' && label.trim() !== '') {\n      labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n    } // Tooltip\n\n\n    const tooltipProps = toTooltipProps(tooltip);\n\n    if (tooltipProps) {\n      const {\n        icon = /*#__PURE__*/React.createElement(QuestionCircleOutlined, null)\n      } = tooltipProps,\n            restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n\n      const tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n        className: `${prefixCls}-item-tooltip`,\n        title: ''\n      }));\n      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n    } // Add required mark if optional\n\n\n    if (requiredMark === 'optional' && !required) {\n      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-item-optional`,\n        title: \"\"\n      }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n    }\n\n    const labelClassName = classNames({\n      [`${prefixCls}-item-required`]: required,\n      [`${prefixCls}-item-required-mark-optional`]: requiredMark === 'optional',\n      [`${prefixCls}-item-no-colon`]: !computedColon\n    });\n    return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n      className: labelColClassName\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: htmlFor,\n      className: labelClassName,\n      title: typeof label === 'string' ? label : ''\n    }, labelChildren));\n  });\n};\n\nexport default FormItemLabel;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/form/FormItemLabel.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","QuestionCircleOutlined","classNames","React","Col","useLocaleReceiver","defaultLocale","Tooltip","FormContext","toTooltipProps","tooltip","isValidElement","title","FormItemLabel","_ref","prefixCls","label","htmlFor","labelCol","labelAlign","colon","required","requiredMark","formLocale","createElement","Consumer","key","_ref2","vertical","contextLabelAlign","contextLabelCol","labelWrap","contextColon","_a","mergedLabelCol","mergedLabelAlign","labelClsBasic","labelColClassName","className","labelChildren","computedColon","haveColon","trim","replace","tooltipProps","icon","restTooltipProps","tooltipNode","assign","cloneElement","Fragment","optional","Form","labelClassName"],"mappings":"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","sourcesContent":["var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport QuestionCircleOutlined from \"@ant-design/icons/es/icons/QuestionCircleOutlined\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport Col from '../grid/col';\nimport { useLocaleReceiver } from '../locale/LocaleReceiver';\nimport defaultLocale from '../locale/en_US';\nimport Tooltip from '../tooltip';\nimport { FormContext } from './context';\nfunction toTooltipProps(tooltip) {\n  if (!tooltip) {\n    return null;\n  }\n  if (typeof tooltip === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {\n    return tooltip;\n  }\n  return {\n    title: tooltip\n  };\n}\nconst FormItemLabel = _ref => {\n  let {\n    prefixCls,\n    label,\n    htmlFor,\n    labelCol,\n    labelAlign,\n    colon,\n    required,\n    requiredMark,\n    tooltip\n  } = _ref;\n  const [formLocale] = useLocaleReceiver('Form');\n  if (!label) return null;\n  return /*#__PURE__*/React.createElement(FormContext.Consumer, {\n    key: \"label\"\n  }, _ref2 => {\n    let {\n      vertical,\n      labelAlign: contextLabelAlign,\n      labelCol: contextLabelCol,\n      labelWrap,\n      colon: contextColon\n    } = _ref2;\n    var _a;\n    const mergedLabelCol = labelCol || contextLabelCol || {};\n    const mergedLabelAlign = labelAlign || contextLabelAlign;\n    const labelClsBasic = `${prefixCls}-item-label`;\n    const labelColClassName = classNames(labelClsBasic, mergedLabelAlign === 'left' && `${labelClsBasic}-left`, mergedLabelCol.className, {\n      [`${labelClsBasic}-wrap`]: !!labelWrap\n    });\n    let labelChildren = label;\n    // Keep label is original where there should have no colon\n    const computedColon = colon === true || contextColon !== false && colon !== false;\n    const haveColon = computedColon && !vertical;\n    // Remove duplicated user input colon\n    if (haveColon && typeof label === 'string' && label.trim() !== '') {\n      labelChildren = label.replace(/[:|ï¼š]\\s*$/, '');\n    }\n    // Tooltip\n    const tooltipProps = toTooltipProps(tooltip);\n    if (tooltipProps) {\n      const {\n          icon = /*#__PURE__*/React.createElement(QuestionCircleOutlined, null)\n        } = tooltipProps,\n        restTooltipProps = __rest(tooltipProps, [\"icon\"]);\n      const tooltipNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, restTooltipProps), /*#__PURE__*/React.cloneElement(icon, {\n        className: `${prefixCls}-item-tooltip`,\n        title: ''\n      }));\n      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);\n    }\n    // Add required mark if optional\n    if (requiredMark === 'optional' && !required) {\n      labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement(\"span\", {\n        className: `${prefixCls}-item-optional`,\n        title: \"\"\n      }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = defaultLocale.Form) === null || _a === void 0 ? void 0 : _a.optional)));\n    }\n    const labelClassName = classNames({\n      [`${prefixCls}-item-required`]: required,\n      [`${prefixCls}-item-required-mark-optional`]: requiredMark === 'optional',\n      [`${prefixCls}-item-no-colon`]: !computedColon\n    });\n    return /*#__PURE__*/React.createElement(Col, Object.assign({}, mergedLabelCol, {\n      className: labelColClassName\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: htmlFor,\n      className: labelClassName,\n      title: typeof label === 'string' ? label : ''\n    }, labelChildren));\n  });\n};\nexport default FormItemLabel;"]},"metadata":{},"sourceType":"module"}