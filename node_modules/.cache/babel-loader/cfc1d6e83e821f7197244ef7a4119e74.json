{"ast":null,"code":"import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls(); // Generate style for all a tags in antd component.\n\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/theme/util/genComponentStyleHook.js"],"names":["useStyleRegister","useContext","genCommonStyle","genLinkStyle","ConfigContext","mergeToken","statisticToken","useToken","genComponentStyleHook","component","styleFn","getDefaultToken","prefixCls","theme","token","hashId","getPrefixCls","iconPrefixCls","rootPrefixCls","path","proxyToken","flush","defaultComponentToken","mergedComponentToken","Object","assign","componentCls","mergedToken","iconCls","antCls","styleInterpolation","overrideComponentToken"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,aAA7C;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,QAArC,QAAqD,aAArD;AACA,eAAe,SAASC,qBAAT,CAA+BC,SAA/B,EAA0CC,OAA1C,EAAmDC,eAAnD,EAAoE;AACjF,SAAOC,SAAS,IAAI;AAClB,UAAM,CAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,IAAyBR,QAAQ,EAAvC;AACA,UAAM;AACJS,MAAAA,YADI;AAEJC,MAAAA;AAFI,QAGFhB,UAAU,CAACG,aAAD,CAHd;AAIA,UAAMc,aAAa,GAAGF,YAAY,EAAlC,CANkB,CAOlB;;AACAhB,IAAAA,gBAAgB,CAAC;AACfa,MAAAA,KADe;AAEfC,MAAAA,KAFe;AAGfC,MAAAA,MAHe;AAIfI,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAWD,aAAX;AAJS,KAAD,EAKb,MAAM,CAAC;AACR;AACA,WAAKf,YAAY,CAACW,KAAD;AAFT,KAAD,CALO,CAAhB;AASA,WAAO,CAACd,gBAAgB,CAAC;AACvBa,MAAAA,KADuB;AAEvBC,MAAAA,KAFuB;AAGvBC,MAAAA,MAHuB;AAIvBI,MAAAA,IAAI,EAAE,CAACV,SAAD,EAAYG,SAAZ,EAAuBK,aAAvB;AAJiB,KAAD,EAKrB,MAAM;AACP,YAAM;AACJH,QAAAA,KAAK,EAAEM,UADH;AAEJC,QAAAA;AAFI,UAGFf,cAAc,CAACQ,KAAD,CAHlB;AAIA,YAAMQ,qBAAqB,GAAG,OAAOX,eAAP,KAA2B,UAA3B,GAAwCA,eAAe,CAACS,UAAD,CAAvD,GAAsET,eAApG;AACA,YAAMY,oBAAoB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,qBAAlB,CAAd,EAAwDR,KAAK,CAACL,SAAD,CAA7D,CAA7B;AACA,YAAMiB,YAAY,GAAI,IAAGd,SAAU,EAAnC;AACA,YAAMe,WAAW,GAAGtB,UAAU,CAACe,UAAD,EAAa;AACzCM,QAAAA,YADyC;AAEzCd,QAAAA,SAFyC;AAGzCgB,QAAAA,OAAO,EAAG,IAAGX,aAAc,EAHc;AAIzCY,QAAAA,MAAM,EAAG,IAAGX,aAAc;AAJe,OAAb,EAK3BK,oBAL2B,CAA9B;AAMA,YAAMO,kBAAkB,GAAGpB,OAAO,CAACiB,WAAD,EAAc;AAC9CZ,QAAAA,MAD8C;AAE9CH,QAAAA,SAF8C;AAG9CM,QAAAA,aAH8C;AAI9CD,QAAAA,aAJ8C;AAK9Cc,QAAAA,sBAAsB,EAAEjB,KAAK,CAACL,SAAD;AALiB,OAAd,CAAlC;AAOAY,MAAAA,KAAK,CAACZ,SAAD,EAAYc,oBAAZ,CAAL;AACA,aAAO,CAACrB,cAAc,CAACY,KAAD,EAAQF,SAAR,CAAf,EAAmCkB,kBAAnC,CAAP;AACD,KA5BuB,CAAjB,EA4BHf,MA5BG,CAAP;AA6BD,GA9CD;AA+CD","sourcesContent":["import { useStyleRegister } from '@ant-design/cssinjs';\nimport { useContext } from 'react';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport { ConfigContext } from '../../config-provider/context';\nimport { mergeToken, statisticToken, useToken } from '../internal';\nexport default function genComponentStyleHook(component, styleFn, getDefaultToken) {\n  return prefixCls => {\n    const [theme, token, hashId] = useToken();\n    const {\n      getPrefixCls,\n      iconPrefixCls\n    } = useContext(ConfigContext);\n    const rootPrefixCls = getPrefixCls();\n    // Generate style for all a tags in antd component.\n    useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: ['Shared', rootPrefixCls]\n    }, () => [{\n      // Link\n      '&': genLinkStyle(token)\n    }]);\n    return [useStyleRegister({\n      theme,\n      token,\n      hashId,\n      path: [component, prefixCls, iconPrefixCls]\n    }, () => {\n      const {\n        token: proxyToken,\n        flush\n      } = statisticToken(token);\n      const defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(proxyToken) : getDefaultToken;\n      const mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), token[component]);\n      const componentCls = `.${prefixCls}`;\n      const mergedToken = mergeToken(proxyToken, {\n        componentCls,\n        prefixCls,\n        iconCls: `.${iconPrefixCls}`,\n        antCls: `.${rootPrefixCls}`\n      }, mergedComponentToken);\n      const styleInterpolation = styleFn(mergedToken, {\n        hashId,\n        prefixCls,\n        rootPrefixCls,\n        iconPrefixCls,\n        overrideComponentToken: token[component]\n      });\n      flush(component, mergedComponentToken);\n      return [genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}"]},"metadata":{},"sourceType":"module"}