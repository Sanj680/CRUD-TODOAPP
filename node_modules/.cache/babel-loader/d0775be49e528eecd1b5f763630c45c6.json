{"ast":null,"code":"import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent } from '../../style';\n\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    avatarSizeBase,\n    avatarSizeLG,\n    avatarSizeSM,\n    avatarFontSizeBase,\n    avatarFontSizeLG,\n    avatarFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token; // Avatar size style\n\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: `${size - lineWidth * 2}px`,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${lineWidth}px ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(avatarSizeBase, avatarFontSizeBase, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(avatarSizeLG, avatarFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(avatarSizeSM, avatarFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\n\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    avatarGroupBorderColor,\n    avatarGroupOverlapping,\n    avatarGroupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: avatarGroupBorderColor,\n        [`&:not(:first-child)`]: {\n          marginInlineStart: -avatarGroupOverlapping\n        }\n      },\n      [`&-popover`]: {\n        [`${componentCls} + ${componentCls}`]: {\n          marginInlineStart: avatarGroupSpace\n        }\n      }\n    }\n  };\n};\n\nexport default genComponentStyleHook('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    colorBorderBg,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid,\n    avatarSizeBase: controlHeight,\n    avatarSizeLG: controlHeightLG,\n    avatarSizeSM: controlHeightSM,\n    avatarFontSizeBase: Math.round((fontSizeLG + fontSizeXL) / 2),\n    avatarFontSizeLG: fontSizeHeading3,\n    avatarFontSizeSM: fontSize,\n    avatarGroupOverlapping: marginXS,\n    avatarGroupSpace: marginXS,\n    avatarGroupBorderColor: colorBorderBg\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n});","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/avatar/style/index.js"],"names":["genComponentStyleHook","mergeToken","resetComponent","genBaseStyle","token","antCls","componentCls","iconCls","avatarBg","avatarColor","avatarSizeBase","avatarSizeLG","avatarSizeSM","avatarFontSizeBase","avatarFontSizeLG","avatarFontSizeSM","borderRadius","borderRadiusLG","borderRadiusSM","lineWidth","lineType","avatarSizeStyle","size","fontSize","radius","width","height","lineHeight","position","left","_skip_check_","value","transformOrigin","margin","Object","assign","display","overflow","color","whiteSpace","textAlign","verticalAlign","background","border","objectFit","genGroupStyle","avatarGroupBorderColor","avatarGroupOverlapping","avatarGroupSpace","borderColor","marginInlineStart","colorTextLightSolid","controlHeight","controlHeightLG","controlHeightSM","fontSizeLG","fontSizeXL","fontSizeHeading3","marginXS","colorBorderBg","colorTextPlaceholder","avatarToken","Math","round"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,UAAhC,QAAkD,sBAAlD;AACA,SAASC,cAAT,QAA+B,aAA/B;;AACA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,YAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA,kBATI;AAUJC,IAAAA,gBAVI;AAWJC,IAAAA,gBAXI;AAYJC,IAAAA,YAZI;AAaJC,IAAAA,cAbI;AAcJC,IAAAA,cAdI;AAeJC,IAAAA,SAfI;AAgBJC,IAAAA;AAhBI,MAiBFhB,KAjBJ,CAD4B,CAmB5B;;AACA,QAAMiB,eAAe,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,MAA6B;AACnDC,IAAAA,KAAK,EAAEH,IAD4C;AAEnDI,IAAAA,MAAM,EAAEJ,IAF2C;AAGnDK,IAAAA,UAAU,EAAG,GAAEL,IAAI,GAAGH,SAAS,GAAG,CAAE,IAHe;AAInDH,IAAAA,YAAY,EAAE,KAJqC;AAKnD,KAAE,IAAGV,YAAa,SAAlB,GAA6B;AAC3BU,MAAAA,YAAY,EAAEQ;AADa,KALsB;AAQnD,KAAE,GAAElB,YAAa,SAAjB,GAA4B;AAC1BsB,MAAAA,QAAQ,EAAE,UADgB;AAE1BC,MAAAA,IAAI,EAAE;AACJC,QAAAA,YAAY,EAAE,IADV;AAEJC,QAAAA,KAAK,EAAE;AAFH,OAFoB;AAM1BC,MAAAA,eAAe,EAAE;AANS,KARuB;AAgBnD,KAAE,IAAG1B,YAAa,OAAlB,GAA2B;AACzBiB,MAAAA,QADyB;AAEzB,OAAE,KAAIhB,OAAQ,EAAd,GAAkB;AAChB0B,QAAAA,MAAM,EAAE;AADQ;AAFO;AAhBwB,GAA7B,CAAxB;;AAuBA,SAAO;AACL,KAAC3B,YAAD,GAAgB4B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjC,cAAc,CAACE,KAAD,CAAhC,CAAd,EAAwD;AAClGwB,MAAAA,QAAQ,EAAE,UADwF;AAElGQ,MAAAA,OAAO,EAAE,cAFyF;AAGlGC,MAAAA,QAAQ,EAAE,QAHwF;AAIlGC,MAAAA,KAAK,EAAE7B,WAJ2F;AAKlG8B,MAAAA,UAAU,EAAE,QALsF;AAMlGC,MAAAA,SAAS,EAAE,QANuF;AAOlGC,MAAAA,aAAa,EAAE,QAPmF;AAQlGC,MAAAA,UAAU,EAAElC,QARsF;AASlGmC,MAAAA,MAAM,EAAG,GAAExB,SAAU,MAAKC,QAAS,cAT+D;AAUlG,OAAE,SAAF,GAAa;AACXsB,QAAAA,UAAU,EAAE;AADD,OAVqF;AAalG,OAAE,GAAErC,MAAO,YAAX,GAAyB;AACvB+B,QAAAA,OAAO,EAAE;AADc;AAbyE,KAAxD,CAAd,EAgB1Bf,eAAe,CAACX,cAAD,EAAiBG,kBAAjB,EAAqCG,YAArC,CAhBW,CAAd,EAgBwD;AACtE,OAAE,MAAF,GAAUkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,eAAe,CAACV,YAAD,EAAeG,gBAAf,EAAiCG,cAAjC,CAAjC,CAD4D;AAEtE,OAAE,MAAF,GAAUiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,eAAe,CAACT,YAAD,EAAeG,gBAAf,EAAiCG,cAAjC,CAAjC,CAF4D;AAGtE,eAAS;AACPkB,QAAAA,OAAO,EAAE,OADF;AAEPX,QAAAA,KAAK,EAAE,MAFA;AAGPC,QAAAA,MAAM,EAAE,MAHD;AAIPkB,QAAAA,SAAS,EAAE;AAJJ;AAH6D,KAhBxD;AADX,GAAP;AA4BD,CAvED;;AAwEA,MAAMC,aAAa,GAAGzC,KAAK,IAAI;AAC7B,QAAM;AACJE,IAAAA,YADI;AAEJwC,IAAAA,sBAFI;AAGJC,IAAAA,sBAHI;AAIJC,IAAAA;AAJI,MAKF5C,KALJ;AAMA,SAAO;AACL,KAAE,GAAEE,YAAa,QAAjB,GAA2B;AACzB8B,MAAAA,OAAO,EAAE,aADgB;AAEzB,OAAE,GAAE9B,YAAa,EAAjB,GAAqB;AACnB2C,QAAAA,WAAW,EAAEH,sBADM;AAEnB,SAAE,qBAAF,GAAyB;AACvBI,UAAAA,iBAAiB,EAAE,CAACH;AADG;AAFN,OAFI;AAQzB,OAAE,WAAF,GAAe;AACb,SAAE,GAAEzC,YAAa,MAAKA,YAAa,EAAnC,GAAuC;AACrC4C,UAAAA,iBAAiB,EAAEF;AADkB;AAD1B;AARU;AADtB,GAAP;AAgBD,CAvBD;;AAwBA,eAAehD,qBAAqB,CAAC,QAAD,EAAWI,KAAK,IAAI;AACtD,QAAM;AACJ+C,IAAAA,mBADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA,eAJI;AAKJ/B,IAAAA,QALI;AAMJgC,IAAAA,UANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,gBARI;AASJC,IAAAA,QATI;AAUJC,IAAAA,aAVI;AAWJC,IAAAA;AAXI,MAYFxD,KAZJ;AAaA,QAAMyD,WAAW,GAAG5D,UAAU,CAACG,KAAD,EAAQ;AACpCI,IAAAA,QAAQ,EAAEoD,oBAD0B;AAEpCnD,IAAAA,WAAW,EAAE0C,mBAFuB;AAGpCzC,IAAAA,cAAc,EAAE0C,aAHoB;AAIpCzC,IAAAA,YAAY,EAAE0C,eAJsB;AAKpCzC,IAAAA,YAAY,EAAE0C,eALsB;AAMpCzC,IAAAA,kBAAkB,EAAEiD,IAAI,CAACC,KAAL,CAAW,CAACR,UAAU,GAAGC,UAAd,IAA4B,CAAvC,CANgB;AAOpC1C,IAAAA,gBAAgB,EAAE2C,gBAPkB;AAQpC1C,IAAAA,gBAAgB,EAAEQ,QARkB;AASpCwB,IAAAA,sBAAsB,EAAEW,QATY;AAUpCV,IAAAA,gBAAgB,EAAEU,QAVkB;AAWpCZ,IAAAA,sBAAsB,EAAEa;AAXY,GAAR,CAA9B;AAaA,SAAO,CAACxD,YAAY,CAAC0D,WAAD,CAAb,EAA4BhB,aAAa,CAACgB,WAAD,CAAzC,CAAP;AACD,CA5BmC,CAApC","sourcesContent":["import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent } from '../../style';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    avatarSizeBase,\n    avatarSizeLG,\n    avatarSizeSM,\n    avatarFontSizeBase,\n    avatarFontSizeLG,\n    avatarFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: `${size - lineWidth * 2}px`,\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${lineWidth}px ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(avatarSizeBase, avatarFontSizeBase, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(avatarSizeLG, avatarFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(avatarSizeSM, avatarFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    avatarGroupBorderColor,\n    avatarGroupOverlapping,\n    avatarGroupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: avatarGroupBorderColor,\n        [`&:not(:first-child)`]: {\n          marginInlineStart: -avatarGroupOverlapping\n        }\n      },\n      [`&-popover`]: {\n        [`${componentCls} + ${componentCls}`]: {\n          marginInlineStart: avatarGroupSpace\n        }\n      }\n    }\n  };\n};\nexport default genComponentStyleHook('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    colorBorderBg,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid,\n    avatarSizeBase: controlHeight,\n    avatarSizeLG: controlHeightLG,\n    avatarSizeSM: controlHeightSM,\n    avatarFontSizeBase: Math.round((fontSizeLG + fontSizeXL) / 2),\n    avatarFontSizeLG: fontSizeHeading3,\n    avatarFontSizeSM: fontSize,\n    avatarGroupOverlapping: marginXS,\n    avatarGroupSpace: marginXS,\n    avatarGroupBorderColor: colorBorderBg\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n});"]},"metadata":{},"sourceType":"module"}