{"ast":null,"code":"import { genComponentStyleHook, mergeToken, PresetColors } from '../../theme/internal';\nimport capitalize from '../../_util/capitalize';\nimport { resetComponent } from '../../style';\n\nconst genTagStatusStyle = (token, status, cssVariableType) => {\n  const capitalizedCssVariableType = capitalize(cssVariableType);\n  return {\n    [`${token.componentCls}-${status}`]: {\n      color: token[`color${cssVariableType}`],\n      background: token[`color${capitalizedCssVariableType}Bg`],\n      borderColor: token[`color${capitalizedCssVariableType}Border`]\n    }\n  };\n}; // FIXME: special preset colors\n\n\nconst genTagColorStyle = token => PresetColors.reduce((prev, colorKey) => {\n  const lightColor = token[`${colorKey}-1`];\n  const lightBorderColor = token[`${colorKey}-3`];\n  const darkColor = token[`${colorKey}-6`];\n  const textColor = token[`${colorKey}-7`];\n  return Object.assign(Object.assign({}, prev), {\n    [`${token.componentCls}-${colorKey}`]: {\n      color: textColor,\n      background: lightColor,\n      borderColor: lightBorderColor\n    },\n    [`${token.componentCls}-${colorKey}-inverse`]: {\n      color: token.colorTextLightSolid,\n      background: darkColor,\n      borderColor: darkColor\n    }\n  });\n}, {});\n\nconst genBaseStyle = token => {\n  const {\n    paddingXXS,\n    lineWidth,\n    tagPaddingHorizontal\n  } = token;\n  const paddingInline = tagPaddingHorizontal - lineWidth;\n  const iconMarginInline = paddingXXS - lineWidth;\n  return {\n    // Result\n    [token.componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      height: 'auto',\n      marginInlineEnd: token.marginXS,\n      paddingInline,\n      fontSize: token.tagFontSize,\n      lineHeight: `${token.tagLineHeight}px`,\n      whiteSpace: 'nowrap',\n      background: token.tagDefaultBg,\n      border: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`,\n      borderRadius: token.borderRadiusSM,\n      opacity: 1,\n      transition: `all ${token.motionDurationMid}`,\n      textAlign: 'start',\n      // RTL\n      '&&-rtl': {\n        direction: 'rtl'\n      },\n      '&, a, a:hover': {\n        color: token.tagDefaultColor\n      },\n      [`${token.componentCls}-close-icon`]: {\n        marginInlineStart: iconMarginInline,\n        color: token.colorTextDescription,\n        fontSize: token.tagIconSize,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      [`&&-has-color`]: {\n        borderColor: 'transparent',\n        [`&, a, a:hover, ${token.iconCls}-close, ${token.iconCls}-close:hover`]: {\n          color: token.colorTextLightSolid\n        }\n      },\n      [`&-checkable`]: {\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        cursor: 'pointer',\n        '&:not(&-checked):hover': {\n          color: token.colorPrimary,\n          backgroundColor: token.colorFillSecondary\n        },\n        '&:active, &-checked': {\n          color: token.colorTextLightSolid\n        },\n        '&-checked': {\n          backgroundColor: token.colorPrimary,\n          '&:hover': {\n            backgroundColor: token.colorPrimaryHover\n          }\n        },\n        '&:active': {\n          backgroundColor: token.colorPrimaryActive\n        }\n      },\n      [`&-hidden`]: {\n        display: 'none'\n      },\n      // To ensure that a space will be placed between character and `Icon`.\n      [`> ${token.iconCls} + span, > span + ${token.iconCls}`]: {\n        marginInlineStart: paddingInline\n      }\n    })\n  };\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook('Tag', token => {\n  const {\n    fontSize,\n    lineHeight,\n    lineWidth,\n    fontSizeIcon\n  } = token;\n  const tagHeight = Math.round(fontSize * lineHeight);\n  const tagFontSize = token.fontSizeSM;\n  const tagLineHeight = tagHeight - lineWidth * 2;\n  const tagDefaultBg = token.colorFillAlter;\n  const tagDefaultColor = token.colorText;\n  const tagToken = mergeToken(token, {\n    tagFontSize,\n    tagLineHeight,\n    tagDefaultBg,\n    tagDefaultColor,\n    tagIconSize: fontSizeIcon - 2 * lineWidth,\n    tagPaddingHorizontal: 8 // Fixed padding.\n\n  });\n  return [genBaseStyle(tagToken), genTagColorStyle(tagToken), genTagStatusStyle(tagToken, 'success', 'Success'), genTagStatusStyle(tagToken, 'processing', 'Info'), genTagStatusStyle(tagToken, 'error', 'Error'), genTagStatusStyle(tagToken, 'warning', 'Warning')];\n});","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/tag/style/index.js"],"names":["genComponentStyleHook","mergeToken","PresetColors","capitalize","resetComponent","genTagStatusStyle","token","status","cssVariableType","capitalizedCssVariableType","componentCls","color","background","borderColor","genTagColorStyle","reduce","prev","colorKey","lightColor","lightBorderColor","darkColor","textColor","Object","assign","colorTextLightSolid","genBaseStyle","paddingXXS","lineWidth","tagPaddingHorizontal","paddingInline","iconMarginInline","display","height","marginInlineEnd","marginXS","fontSize","tagFontSize","lineHeight","tagLineHeight","whiteSpace","tagDefaultBg","border","lineType","colorBorder","borderRadius","borderRadiusSM","opacity","transition","motionDurationMid","textAlign","direction","tagDefaultColor","marginInlineStart","colorTextDescription","tagIconSize","cursor","colorTextHeading","iconCls","backgroundColor","colorPrimary","colorFillSecondary","colorPrimaryHover","colorPrimaryActive","fontSizeIcon","tagHeight","Math","round","fontSizeSM","colorFillAlter","colorText","tagToken"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,UAAhC,EAA4CC,YAA5C,QAAgE,sBAAhE;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,cAAT,QAA+B,aAA/B;;AACA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,eAAhB,KAAoC;AAC5D,QAAMC,0BAA0B,GAAGN,UAAU,CAACK,eAAD,CAA7C;AACA,SAAO;AACL,KAAE,GAAEF,KAAK,CAACI,YAAa,IAAGH,MAAO,EAAjC,GAAqC;AACnCI,MAAAA,KAAK,EAAEL,KAAK,CAAE,QAAOE,eAAgB,EAAzB,CADuB;AAEnCI,MAAAA,UAAU,EAAEN,KAAK,CAAE,QAAOG,0BAA2B,IAApC,CAFkB;AAGnCI,MAAAA,WAAW,EAAEP,KAAK,CAAE,QAAOG,0BAA2B,QAApC;AAHiB;AADhC,GAAP;AAOD,CATD,C,CAUA;;;AACA,MAAMK,gBAAgB,GAAGR,KAAK,IAAIJ,YAAY,CAACa,MAAb,CAAoB,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACxE,QAAMC,UAAU,GAAGZ,KAAK,CAAE,GAAEW,QAAS,IAAb,CAAxB;AACA,QAAME,gBAAgB,GAAGb,KAAK,CAAE,GAAEW,QAAS,IAAb,CAA9B;AACA,QAAMG,SAAS,GAAGd,KAAK,CAAE,GAAEW,QAAS,IAAb,CAAvB;AACA,QAAMI,SAAS,GAAGf,KAAK,CAAE,GAAEW,QAAS,IAAb,CAAvB;AACA,SAAOK,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,IAAlB,CAAd,EAAuC;AAC5C,KAAE,GAAEV,KAAK,CAACI,YAAa,IAAGO,QAAS,EAAnC,GAAuC;AACrCN,MAAAA,KAAK,EAAEU,SAD8B;AAErCT,MAAAA,UAAU,EAAEM,UAFyB;AAGrCL,MAAAA,WAAW,EAAEM;AAHwB,KADK;AAM5C,KAAE,GAAEb,KAAK,CAACI,YAAa,IAAGO,QAAS,UAAnC,GAA+C;AAC7CN,MAAAA,KAAK,EAAEL,KAAK,CAACkB,mBADgC;AAE7CZ,MAAAA,UAAU,EAAEQ,SAFiC;AAG7CP,MAAAA,WAAW,EAAEO;AAHgC;AANH,GAAvC,CAAP;AAYD,CAjBiC,EAiB/B,EAjB+B,CAAlC;;AAkBA,MAAMK,YAAY,GAAGnB,KAAK,IAAI;AAC5B,QAAM;AACJoB,IAAAA,UADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA;AAHI,MAIFtB,KAJJ;AAKA,QAAMuB,aAAa,GAAGD,oBAAoB,GAAGD,SAA7C;AACA,QAAMG,gBAAgB,GAAGJ,UAAU,GAAGC,SAAtC;AACA,SAAO;AACL;AACA,KAACrB,KAAK,CAACI,YAAP,GAAsBY,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,cAAc,CAACE,KAAD,CAAhC,CAAd,EAAwD;AAC5EyB,MAAAA,OAAO,EAAE,cADmE;AAE5EC,MAAAA,MAAM,EAAE,MAFoE;AAG5EC,MAAAA,eAAe,EAAE3B,KAAK,CAAC4B,QAHqD;AAI5EL,MAAAA,aAJ4E;AAK5EM,MAAAA,QAAQ,EAAE7B,KAAK,CAAC8B,WAL4D;AAM5EC,MAAAA,UAAU,EAAG,GAAE/B,KAAK,CAACgC,aAAc,IANyC;AAO5EC,MAAAA,UAAU,EAAE,QAPgE;AAQ5E3B,MAAAA,UAAU,EAAEN,KAAK,CAACkC,YAR0D;AAS5EC,MAAAA,MAAM,EAAG,GAAEnC,KAAK,CAACqB,SAAU,MAAKrB,KAAK,CAACoC,QAAS,IAAGpC,KAAK,CAACqC,WAAY,EATQ;AAU5EC,MAAAA,YAAY,EAAEtC,KAAK,CAACuC,cAVwD;AAW5EC,MAAAA,OAAO,EAAE,CAXmE;AAY5EC,MAAAA,UAAU,EAAG,OAAMzC,KAAK,CAAC0C,iBAAkB,EAZiC;AAa5EC,MAAAA,SAAS,EAAE,OAbiE;AAc5E;AACA,gBAAU;AACRC,QAAAA,SAAS,EAAE;AADH,OAfkE;AAkB5E,uBAAiB;AACfvC,QAAAA,KAAK,EAAEL,KAAK,CAAC6C;AADE,OAlB2D;AAqB5E,OAAE,GAAE7C,KAAK,CAACI,YAAa,aAAvB,GAAsC;AACpC0C,QAAAA,iBAAiB,EAAEtB,gBADiB;AAEpCnB,QAAAA,KAAK,EAAEL,KAAK,CAAC+C,oBAFuB;AAGpClB,QAAAA,QAAQ,EAAE7B,KAAK,CAACgD,WAHoB;AAIpCC,QAAAA,MAAM,EAAE,SAJ4B;AAKpCR,QAAAA,UAAU,EAAG,OAAMzC,KAAK,CAAC0C,iBAAkB,EALP;AAMpC,mBAAW;AACTrC,UAAAA,KAAK,EAAEL,KAAK,CAACkD;AADJ;AANyB,OArBsC;AA+B5E,OAAE,cAAF,GAAkB;AAChB3C,QAAAA,WAAW,EAAE,aADG;AAEhB,SAAE,kBAAiBP,KAAK,CAACmD,OAAQ,WAAUnD,KAAK,CAACmD,OAAQ,cAAzD,GAAyE;AACvE9C,UAAAA,KAAK,EAAEL,KAAK,CAACkB;AAD0D;AAFzD,OA/B0D;AAqC5E,OAAE,aAAF,GAAiB;AACfkC,QAAAA,eAAe,EAAE,aADF;AAEf7C,QAAAA,WAAW,EAAE,aAFE;AAGf0C,QAAAA,MAAM,EAAE,SAHO;AAIf,kCAA0B;AACxB5C,UAAAA,KAAK,EAAEL,KAAK,CAACqD,YADW;AAExBD,UAAAA,eAAe,EAAEpD,KAAK,CAACsD;AAFC,SAJX;AAQf,+BAAuB;AACrBjD,UAAAA,KAAK,EAAEL,KAAK,CAACkB;AADQ,SARR;AAWf,qBAAa;AACXkC,UAAAA,eAAe,EAAEpD,KAAK,CAACqD,YADZ;AAEX,qBAAW;AACTD,YAAAA,eAAe,EAAEpD,KAAK,CAACuD;AADd;AAFA,SAXE;AAiBf,oBAAY;AACVH,UAAAA,eAAe,EAAEpD,KAAK,CAACwD;AADb;AAjBG,OArC2D;AA0D5E,OAAE,UAAF,GAAc;AACZ/B,QAAAA,OAAO,EAAE;AADG,OA1D8D;AA6D5E;AACA,OAAE,KAAIzB,KAAK,CAACmD,OAAQ,qBAAoBnD,KAAK,CAACmD,OAAQ,EAAtD,GAA0D;AACxDL,QAAAA,iBAAiB,EAAEvB;AADqC;AA9DkB,KAAxD;AAFjB,GAAP;AAqED,CA7ED,C,CA8EA;;;AACA,eAAe7B,qBAAqB,CAAC,KAAD,EAAQM,KAAK,IAAI;AACnD,QAAM;AACJ6B,IAAAA,QADI;AAEJE,IAAAA,UAFI;AAGJV,IAAAA,SAHI;AAIJoC,IAAAA;AAJI,MAKFzD,KALJ;AAMA,QAAM0D,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW/B,QAAQ,GAAGE,UAAtB,CAAlB;AACA,QAAMD,WAAW,GAAG9B,KAAK,CAAC6D,UAA1B;AACA,QAAM7B,aAAa,GAAG0B,SAAS,GAAGrC,SAAS,GAAG,CAA9C;AACA,QAAMa,YAAY,GAAGlC,KAAK,CAAC8D,cAA3B;AACA,QAAMjB,eAAe,GAAG7C,KAAK,CAAC+D,SAA9B;AACA,QAAMC,QAAQ,GAAGrE,UAAU,CAACK,KAAD,EAAQ;AACjC8B,IAAAA,WADiC;AAEjCE,IAAAA,aAFiC;AAGjCE,IAAAA,YAHiC;AAIjCW,IAAAA,eAJiC;AAKjCG,IAAAA,WAAW,EAAES,YAAY,GAAG,IAAIpC,SALC;AAMjCC,IAAAA,oBAAoB,EAAE,CANW,CAMT;;AANS,GAAR,CAA3B;AASA,SAAO,CAACH,YAAY,CAAC6C,QAAD,CAAb,EAAyBxD,gBAAgB,CAACwD,QAAD,CAAzC,EAAqDjE,iBAAiB,CAACiE,QAAD,EAAW,SAAX,EAAsB,SAAtB,CAAtE,EAAwGjE,iBAAiB,CAACiE,QAAD,EAAW,YAAX,EAAyB,MAAzB,CAAzH,EAA2JjE,iBAAiB,CAACiE,QAAD,EAAW,OAAX,EAAoB,OAApB,CAA5K,EAA0MjE,iBAAiB,CAACiE,QAAD,EAAW,SAAX,EAAsB,SAAtB,CAA3N,CAAP;AACD,CAtBmC,CAApC","sourcesContent":["import { genComponentStyleHook, mergeToken, PresetColors } from '../../theme/internal';\nimport capitalize from '../../_util/capitalize';\nimport { resetComponent } from '../../style';\nconst genTagStatusStyle = (token, status, cssVariableType) => {\n  const capitalizedCssVariableType = capitalize(cssVariableType);\n  return {\n    [`${token.componentCls}-${status}`]: {\n      color: token[`color${cssVariableType}`],\n      background: token[`color${capitalizedCssVariableType}Bg`],\n      borderColor: token[`color${capitalizedCssVariableType}Border`]\n    }\n  };\n};\n// FIXME: special preset colors\nconst genTagColorStyle = token => PresetColors.reduce((prev, colorKey) => {\n  const lightColor = token[`${colorKey}-1`];\n  const lightBorderColor = token[`${colorKey}-3`];\n  const darkColor = token[`${colorKey}-6`];\n  const textColor = token[`${colorKey}-7`];\n  return Object.assign(Object.assign({}, prev), {\n    [`${token.componentCls}-${colorKey}`]: {\n      color: textColor,\n      background: lightColor,\n      borderColor: lightBorderColor\n    },\n    [`${token.componentCls}-${colorKey}-inverse`]: {\n      color: token.colorTextLightSolid,\n      background: darkColor,\n      borderColor: darkColor\n    }\n  });\n}, {});\nconst genBaseStyle = token => {\n  const {\n    paddingXXS,\n    lineWidth,\n    tagPaddingHorizontal\n  } = token;\n  const paddingInline = tagPaddingHorizontal - lineWidth;\n  const iconMarginInline = paddingXXS - lineWidth;\n  return {\n    // Result\n    [token.componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'inline-block',\n      height: 'auto',\n      marginInlineEnd: token.marginXS,\n      paddingInline,\n      fontSize: token.tagFontSize,\n      lineHeight: `${token.tagLineHeight}px`,\n      whiteSpace: 'nowrap',\n      background: token.tagDefaultBg,\n      border: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`,\n      borderRadius: token.borderRadiusSM,\n      opacity: 1,\n      transition: `all ${token.motionDurationMid}`,\n      textAlign: 'start',\n      // RTL\n      '&&-rtl': {\n        direction: 'rtl'\n      },\n      '&, a, a:hover': {\n        color: token.tagDefaultColor\n      },\n      [`${token.componentCls}-close-icon`]: {\n        marginInlineStart: iconMarginInline,\n        color: token.colorTextDescription,\n        fontSize: token.tagIconSize,\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationMid}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      [`&&-has-color`]: {\n        borderColor: 'transparent',\n        [`&, a, a:hover, ${token.iconCls}-close, ${token.iconCls}-close:hover`]: {\n          color: token.colorTextLightSolid\n        }\n      },\n      [`&-checkable`]: {\n        backgroundColor: 'transparent',\n        borderColor: 'transparent',\n        cursor: 'pointer',\n        '&:not(&-checked):hover': {\n          color: token.colorPrimary,\n          backgroundColor: token.colorFillSecondary\n        },\n        '&:active, &-checked': {\n          color: token.colorTextLightSolid\n        },\n        '&-checked': {\n          backgroundColor: token.colorPrimary,\n          '&:hover': {\n            backgroundColor: token.colorPrimaryHover\n          }\n        },\n        '&:active': {\n          backgroundColor: token.colorPrimaryActive\n        }\n      },\n      [`&-hidden`]: {\n        display: 'none'\n      },\n      // To ensure that a space will be placed between character and `Icon`.\n      [`> ${token.iconCls} + span, > span + ${token.iconCls}`]: {\n        marginInlineStart: paddingInline\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Tag', token => {\n  const {\n    fontSize,\n    lineHeight,\n    lineWidth,\n    fontSizeIcon\n  } = token;\n  const tagHeight = Math.round(fontSize * lineHeight);\n  const tagFontSize = token.fontSizeSM;\n  const tagLineHeight = tagHeight - lineWidth * 2;\n  const tagDefaultBg = token.colorFillAlter;\n  const tagDefaultColor = token.colorText;\n  const tagToken = mergeToken(token, {\n    tagFontSize,\n    tagLineHeight,\n    tagDefaultBg,\n    tagDefaultColor,\n    tagIconSize: fontSizeIcon - 2 * lineWidth,\n    tagPaddingHorizontal: 8 // Fixed padding.\n  });\n\n  return [genBaseStyle(tagToken), genTagColorStyle(tagToken), genTagStatusStyle(tagToken, 'success', 'Success'), genTagStatusStyle(tagToken, 'processing', 'Info'), genTagStatusStyle(tagToken, 'error', 'Error'), genTagStatusStyle(tagToken, 'warning', 'Warning')];\n});"]},"metadata":{},"sourceType":"module"}