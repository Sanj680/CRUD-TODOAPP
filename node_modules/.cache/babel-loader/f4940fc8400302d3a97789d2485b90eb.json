{"ast":null,"code":"import * as React from 'react';\nimport LocaleContext from './context';\nimport defaultLocaleData from './en_US';\n\nconst LocaleReceiver = props => {\n  const {\n    componentName = 'global',\n    defaultLocale,\n    children\n  } = props;\n  const antLocale = React.useContext(LocaleContext);\n  const getLocale = React.useMemo(() => {\n    var _a;\n\n    const locale = defaultLocale || defaultLocaleData[componentName];\n    const localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};\n    return Object.assign(Object.assign({}, locale instanceof Function ? locale() : locale), localeFromContext || {});\n  }, [componentName, defaultLocale, antLocale]);\n  const getLocaleCode = React.useMemo(() => {\n    const localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale\n\n    if (antLocale && antLocale.exist && !localeCode) {\n      return defaultLocaleData.locale;\n    }\n\n    return localeCode;\n  }, [antLocale]);\n  return children(getLocale, getLocaleCode, antLocale);\n};\n\nexport default LocaleReceiver;\nexport const useLocaleReceiver = (componentName, defaultLocale) => {\n  const antLocale = React.useContext(LocaleContext);\n  const getLocale = React.useMemo(() => {\n    var _a;\n\n    const locale = defaultLocale || defaultLocaleData[componentName];\n    const localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};\n    return Object.assign(Object.assign({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});\n  }, [componentName, defaultLocale, antLocale]);\n  return [getLocale];\n};","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/locale/LocaleReceiver.js"],"names":["React","LocaleContext","defaultLocaleData","LocaleReceiver","props","componentName","defaultLocale","children","antLocale","useContext","getLocale","useMemo","_a","locale","localeFromContext","Object","assign","Function","getLocaleCode","localeCode","exist","useLocaleReceiver"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,OAAOC,iBAAP,MAA8B,SAA9B;;AACA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAM;AACJC,IAAAA,aAAa,GAAG,QADZ;AAEJC,IAAAA,aAFI;AAGJC,IAAAA;AAHI,MAIFH,KAJJ;AAKA,QAAMI,SAAS,GAAGR,KAAK,CAACS,UAAN,CAAiBR,aAAjB,CAAlB;AACA,QAAMS,SAAS,GAAGV,KAAK,CAACW,OAAN,CAAc,MAAM;AACpC,QAAIC,EAAJ;;AACA,UAAMC,MAAM,GAAGP,aAAa,IAAIJ,iBAAiB,CAACG,aAAD,CAAjD;AACA,UAAMS,iBAAiB,GAAG,CAACF,EAAE,GAAGJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACH,aAAD,CAArE,MAA0F,IAA1F,IAAkGO,EAAE,KAAK,KAAK,CAA9G,GAAkHA,EAAlH,GAAuH,EAAjJ;AACA,WAAOG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,MAAM,YAAYI,QAAlB,GAA6BJ,MAAM,EAAnC,GAAwCA,MAA1D,CAAd,EAAiFC,iBAAiB,IAAI,EAAtG,CAAP;AACD,GALiB,EAKf,CAACT,aAAD,EAAgBC,aAAhB,EAA+BE,SAA/B,CALe,CAAlB;AAMA,QAAMU,aAAa,GAAGlB,KAAK,CAACW,OAAN,CAAc,MAAM;AACxC,UAAMQ,UAAU,GAAGX,SAAS,IAAIA,SAAS,CAACK,MAA1C,CADwC,CAExC;;AACA,QAAIL,SAAS,IAAIA,SAAS,CAACY,KAAvB,IAAgC,CAACD,UAArC,EAAiD;AAC/C,aAAOjB,iBAAiB,CAACW,MAAzB;AACD;;AACD,WAAOM,UAAP;AACD,GAPqB,EAOnB,CAACX,SAAD,CAPmB,CAAtB;AAQA,SAAOD,QAAQ,CAACG,SAAD,EAAYQ,aAAZ,EAA2BV,SAA3B,CAAf;AACD,CAtBD;;AAuBA,eAAeL,cAAf;AACA,OAAO,MAAMkB,iBAAiB,GAAG,CAAChB,aAAD,EAAgBC,aAAhB,KAAkC;AACjE,QAAME,SAAS,GAAGR,KAAK,CAACS,UAAN,CAAiBR,aAAjB,CAAlB;AACA,QAAMS,SAAS,GAAGV,KAAK,CAACW,OAAN,CAAc,MAAM;AACpC,QAAIC,EAAJ;;AACA,UAAMC,MAAM,GAAGP,aAAa,IAAIJ,iBAAiB,CAACG,aAAD,CAAjD;AACA,UAAMS,iBAAiB,GAAG,CAACF,EAAE,GAAGJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACH,aAAD,CAArE,MAA0F,IAA1F,IAAkGO,EAAE,KAAK,KAAK,CAA9G,GAAkHA,EAAlH,GAAuH,EAAjJ;AACA,WAAOG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,OAAOH,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAA5D,CAAd,EAAmFC,iBAAiB,IAAI,EAAxG,CAAP;AACD,GALiB,EAKf,CAACT,aAAD,EAAgBC,aAAhB,EAA+BE,SAA/B,CALe,CAAlB;AAMA,SAAO,CAACE,SAAD,CAAP;AACD,CATM","sourcesContent":["import * as React from 'react';\nimport LocaleContext from './context';\nimport defaultLocaleData from './en_US';\nconst LocaleReceiver = props => {\n  const {\n    componentName = 'global',\n    defaultLocale,\n    children\n  } = props;\n  const antLocale = React.useContext(LocaleContext);\n  const getLocale = React.useMemo(() => {\n    var _a;\n    const locale = defaultLocale || defaultLocaleData[componentName];\n    const localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};\n    return Object.assign(Object.assign({}, locale instanceof Function ? locale() : locale), localeFromContext || {});\n  }, [componentName, defaultLocale, antLocale]);\n  const getLocaleCode = React.useMemo(() => {\n    const localeCode = antLocale && antLocale.locale;\n    // Had use LocaleProvide but didn't set locale\n    if (antLocale && antLocale.exist && !localeCode) {\n      return defaultLocaleData.locale;\n    }\n    return localeCode;\n  }, [antLocale]);\n  return children(getLocale, getLocaleCode, antLocale);\n};\nexport default LocaleReceiver;\nexport const useLocaleReceiver = (componentName, defaultLocale) => {\n  const antLocale = React.useContext(LocaleContext);\n  const getLocale = React.useMemo(() => {\n    var _a;\n    const locale = defaultLocale || defaultLocaleData[componentName];\n    const localeFromContext = (_a = antLocale === null || antLocale === void 0 ? void 0 : antLocale[componentName]) !== null && _a !== void 0 ? _a : {};\n    return Object.assign(Object.assign({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});\n  }, [componentName, defaultLocale, antLocale]);\n  return [getLocale];\n};"]},"metadata":{},"sourceType":"module"}