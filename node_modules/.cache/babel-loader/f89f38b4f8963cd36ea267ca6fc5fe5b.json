{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\sanja\\\\Downloads\\\\todo-react-main\\\\todo-react-main\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport classNames from 'classnames';\nimport { Item } from 'rc-menu';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { SiderContext } from '../layout/Sider';\nimport Tooltip from '../tooltip';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport MenuContext from './MenuContext';\n\nvar MenuItem = function MenuItem(props) {\n  var className = props.className,\n      children = props.children,\n      icon = props.icon,\n      title = props.title,\n      danger = props.danger;\n\n  var _React$useContext = React.useContext(MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      firstLevel = _React$useContext.firstLevel,\n      direction = _React$useContext.direction,\n      disableMenuItemTitleTooltip = _React$useContext.disableMenuItemTitleTooltip,\n      isInlineCollapsed = _React$useContext.inlineCollapsed;\n\n  var renderItemChildren = function renderItemChildren(inlineCollapsed) {\n    var wrapNode = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-title-content\")\n    }, children); // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span\n    // ref: https://github.com/ant-design/ant-design/pull/23456\n\n    if (!icon || isValidElement(children) && children.type === 'span') {\n      if (children && inlineCollapsed && firstLevel && typeof children === 'string') {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-inline-collapsed-noicon\")\n        }, children.charAt(0));\n      }\n    }\n\n    return wrapNode;\n  };\n\n  var renderItem = function renderItem(_ref) {\n    var _classNames;\n\n    var siderCollapsed = _ref.siderCollapsed;\n\n    var _a;\n\n    var tooltipTitle = title;\n\n    if (typeof title === 'undefined') {\n      tooltipTitle = firstLevel ? children : '';\n    } else if (title === false) {\n      tooltipTitle = '';\n    }\n\n    var tooltipProps = {\n      title: tooltipTitle\n    };\n\n    if (!siderCollapsed && !isInlineCollapsed) {\n      tooltipProps.title = null; // Reset `open` to fix control mode tooltip display not correct\n      // ref: https://github.com/ant-design/ant-design/issues/16742\n\n      tooltipProps.open = false;\n    }\n\n    var childrenLength = toArray(children).length;\n    var returnNode = /*#__PURE__*/React.createElement(Item, Object.assign({}, omit(props, ['title', 'icon', 'danger']), {\n      className: classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-danger\"), danger), _defineProperty(_classNames, \"\".concat(prefixCls, \"-item-only-child\"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),\n      title: typeof title === 'string' ? title : undefined\n    }), cloneElement(icon, {\n      className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', \"\".concat(prefixCls, \"-item-icon\"))\n    }), renderItemChildren(isInlineCollapsed));\n\n    if (!disableMenuItemTitleTooltip) {\n      returnNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, tooltipProps, {\n        placement: direction === 'rtl' ? 'left' : 'right',\n        overlayClassName: \"\".concat(prefixCls, \"-inline-collapsed-tooltip\")\n      }), returnNode);\n    }\n\n    return returnNode;\n  };\n\n  return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, renderItem);\n};\n\nexport default MenuItem;","map":{"version":3,"sources":["C:/Users/sanja/Downloads/todo-react-main/todo-react-main/node_modules/antd/es/menu/MenuItem.js"],"names":["classNames","Item","toArray","omit","React","SiderContext","Tooltip","cloneElement","isValidElement","MenuContext","MenuItem","props","className","children","icon","title","danger","useContext","prefixCls","firstLevel","direction","disableMenuItemTitleTooltip","isInlineCollapsed","inlineCollapsed","renderItemChildren","wrapNode","createElement","type","charAt","renderItem","_ref","siderCollapsed","_a","tooltipTitle","tooltipProps","open","childrenLength","length","returnNode","Object","assign","undefined","placement","overlayClassName","Consumer"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,oBAA7C;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAAA,MAEtBC,SAFsB,GAOpBD,KAPoB,CAEtBC,SAFsB;AAAA,MAGtBC,QAHsB,GAOpBF,KAPoB,CAGtBE,QAHsB;AAAA,MAItBC,IAJsB,GAOpBH,KAPoB,CAItBG,IAJsB;AAAA,MAKtBC,KALsB,GAOpBJ,KAPoB,CAKtBI,KALsB;AAAA,MAMtBC,MANsB,GAOpBL,KAPoB,CAMtBK,MANsB;;AAAA,0BAcpBZ,KAAK,CAACa,UAAN,CAAiBR,WAAjB,CAdoB;AAAA,MAStBS,SATsB,qBAStBA,SATsB;AAAA,MAUtBC,UAVsB,qBAUtBA,UAVsB;AAAA,MAWtBC,SAXsB,qBAWtBA,SAXsB;AAAA,MAYtBC,2BAZsB,qBAYtBA,2BAZsB;AAAA,MAaLC,iBAbK,qBAatBC,eAbsB;;AAexB,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAD,eAAe,EAAI;AAC5C,QAAME,QAAQ,GAAG,aAAarB,KAAK,CAACsB,aAAN,CAAoB,MAApB,EAA4B;AACxDd,MAAAA,SAAS,YAAKM,SAAL;AAD+C,KAA5B,EAE3BL,QAF2B,CAA9B,CAD4C,CAI5C;AACA;;AACA,QAAI,CAACC,IAAD,IAASN,cAAc,CAACK,QAAD,CAAd,IAA4BA,QAAQ,CAACc,IAAT,KAAkB,MAA3D,EAAmE;AACjE,UAAId,QAAQ,IAAIU,eAAZ,IAA+BJ,UAA/B,IAA6C,OAAON,QAAP,KAAoB,QAArE,EAA+E;AAC7E,eAAO,aAAaT,KAAK,CAACsB,aAAN,CAAoB,KAApB,EAA2B;AAC7Cd,UAAAA,SAAS,YAAKM,SAAL;AADoC,SAA3B,EAEjBL,QAAQ,CAACe,MAAT,CAAgB,CAAhB,CAFiB,CAApB;AAGD;AACF;;AACD,WAAOH,QAAP;AACD,GAdD;;AAeA,MAAMI,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI,EAAI;AAAA;;AAAA,QAEvBC,cAFuB,GAGrBD,IAHqB,CAEvBC,cAFuB;;AAIzB,QAAIC,EAAJ;;AACA,QAAIC,YAAY,GAAGlB,KAAnB;;AACA,QAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChCkB,MAAAA,YAAY,GAAGd,UAAU,GAAGN,QAAH,GAAc,EAAvC;AACD,KAFD,MAEO,IAAIE,KAAK,KAAK,KAAd,EAAqB;AAC1BkB,MAAAA,YAAY,GAAG,EAAf;AACD;;AACD,QAAMC,YAAY,GAAG;AACnBnB,MAAAA,KAAK,EAAEkB;AADY,KAArB;;AAGA,QAAI,CAACF,cAAD,IAAmB,CAACT,iBAAxB,EAA2C;AACzCY,MAAAA,YAAY,CAACnB,KAAb,GAAqB,IAArB,CADyC,CAEzC;AACA;;AACAmB,MAAAA,YAAY,CAACC,IAAb,GAAoB,KAApB;AACD;;AACD,QAAMC,cAAc,GAAGlC,OAAO,CAACW,QAAD,CAAP,CAAkBwB,MAAzC;AACA,QAAIC,UAAU,GAAG,aAAalC,KAAK,CAACsB,aAAN,CAAoBzB,IAApB,EAA0BsC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrC,IAAI,CAACQ,KAAD,EAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAR,CAAtB,EAA4D;AAClHC,MAAAA,SAAS,EAAEZ,UAAU,2DACfkB,SADe,mBACWF,MADX,0CAEfE,SAFe,uBAEe,CAACJ,IAAI,GAAGsB,cAAc,GAAG,CAApB,GAAwBA,cAA7B,MAAiD,CAFhE,iBAGlBxB,SAHkB,CAD6F;AAKlHG,MAAAA,KAAK,EAAE,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC0B;AALuE,KAA5D,CAA1B,EAM1BlC,YAAY,CAACO,IAAD,EAAO;AACrBF,MAAAA,SAAS,EAAEZ,UAAU,CAACQ,cAAc,CAACM,IAAD,CAAd,GAAuB,CAACkB,EAAE,GAAGlB,IAAI,CAACH,KAAX,MAAsB,IAAtB,IAA8BqB,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACpB,SAAjF,GAA6F,EAA9F,YAAqGM,SAArG;AADA,KAAP,CANc,EAQ1BM,kBAAkB,CAACF,iBAAD,CARQ,CAA9B;;AASA,QAAI,CAACD,2BAAL,EAAkC;AAChCiB,MAAAA,UAAU,GAAG,aAAalC,KAAK,CAACsB,aAAN,CAAoBpB,OAApB,EAA6BiC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,YAAlB,EAAgC;AACrFQ,QAAAA,SAAS,EAAEtB,SAAS,KAAK,KAAd,GAAsB,MAAtB,GAA+B,OAD2C;AAErFuB,QAAAA,gBAAgB,YAAKzB,SAAL;AAFqE,OAAhC,CAA7B,EAGtBoB,UAHsB,CAA1B;AAID;;AACD,WAAOA,UAAP;AACD,GArCD;;AAsCA,SAAO,aAAalC,KAAK,CAACsB,aAAN,CAAoBrB,YAAY,CAACuC,QAAjC,EAA2C,IAA3C,EAAiDf,UAAjD,CAApB;AACD,CArED;;AAsEA,eAAenB,QAAf","sourcesContent":["import classNames from 'classnames';\nimport { Item } from 'rc-menu';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { SiderContext } from '../layout/Sider';\nimport Tooltip from '../tooltip';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport MenuContext from './MenuContext';\nconst MenuItem = props => {\n  const {\n    className,\n    children,\n    icon,\n    title,\n    danger\n  } = props;\n  const {\n    prefixCls,\n    firstLevel,\n    direction,\n    disableMenuItemTitleTooltip,\n    inlineCollapsed: isInlineCollapsed\n  } = React.useContext(MenuContext);\n  const renderItemChildren = inlineCollapsed => {\n    const wrapNode = /*#__PURE__*/React.createElement(\"span\", {\n      className: `${prefixCls}-title-content`\n    }, children);\n    // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span\n    // ref: https://github.com/ant-design/ant-design/pull/23456\n    if (!icon || isValidElement(children) && children.type === 'span') {\n      if (children && inlineCollapsed && firstLevel && typeof children === 'string') {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-inline-collapsed-noicon`\n        }, children.charAt(0));\n      }\n    }\n    return wrapNode;\n  };\n  const renderItem = _ref => {\n    let {\n      siderCollapsed\n    } = _ref;\n    var _a;\n    let tooltipTitle = title;\n    if (typeof title === 'undefined') {\n      tooltipTitle = firstLevel ? children : '';\n    } else if (title === false) {\n      tooltipTitle = '';\n    }\n    const tooltipProps = {\n      title: tooltipTitle\n    };\n    if (!siderCollapsed && !isInlineCollapsed) {\n      tooltipProps.title = null;\n      // Reset `open` to fix control mode tooltip display not correct\n      // ref: https://github.com/ant-design/ant-design/issues/16742\n      tooltipProps.open = false;\n    }\n    const childrenLength = toArray(children).length;\n    let returnNode = /*#__PURE__*/React.createElement(Item, Object.assign({}, omit(props, ['title', 'icon', 'danger']), {\n      className: classNames({\n        [`${prefixCls}-item-danger`]: danger,\n        [`${prefixCls}-item-only-child`]: (icon ? childrenLength + 1 : childrenLength) === 1\n      }, className),\n      title: typeof title === 'string' ? title : undefined\n    }), cloneElement(icon, {\n      className: classNames(isValidElement(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', `${prefixCls}-item-icon`)\n    }), renderItemChildren(isInlineCollapsed));\n    if (!disableMenuItemTitleTooltip) {\n      returnNode = /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, tooltipProps, {\n        placement: direction === 'rtl' ? 'left' : 'right',\n        overlayClassName: `${prefixCls}-inline-collapsed-tooltip`\n      }), returnNode);\n    }\n    return returnNode;\n  };\n  return /*#__PURE__*/React.createElement(SiderContext.Consumer, null, renderItem);\n};\nexport default MenuItem;"]},"metadata":{},"sourceType":"module"}